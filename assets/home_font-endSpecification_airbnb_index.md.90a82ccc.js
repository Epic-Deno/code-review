import{_ as n,c as s,a,b as t,o as p}from"./app.0ef4186b.js";const o='{"title":"Airbnb JavaScript Style Guide","description":"","frontmatter":{},"headers":[{"level":2,"title":"Table of Contents","slug":"table-of-contents"},{"level":2,"title":"Types","slug":"types"},{"level":2,"title":"References","slug":"references"},{"level":2,"title":"Objects","slug":"objects"},{"level":2,"title":"Arrays","slug":"arrays"},{"level":2,"title":"Destructuring","slug":"destructuring"},{"level":2,"title":"Strings","slug":"strings"},{"level":2,"title":"Functions","slug":"functions"},{"level":2,"title":"Arrow Functions","slug":"arrow-functions"},{"level":2,"title":"Classes & Constructors","slug":"classes-constructors"},{"level":2,"title":"Modules","slug":"modules"},{"level":2,"title":"Iterators and Generators","slug":"iterators-and-generators"},{"level":2,"title":"Properties","slug":"properties"},{"level":2,"title":"Variables","slug":"variables"},{"level":2,"title":"Hoisting","slug":"hoisting"},{"level":2,"title":"Comparison Operators & Equality","slug":"comparison-operators-equality"},{"level":2,"title":"Blocks","slug":"blocks"},{"level":2,"title":"Control Statements","slug":"control-statements"},{"level":2,"title":"Comments","slug":"comments"},{"level":2,"title":"Whitespace","slug":"whitespace"},{"level":2,"title":"Commas","slug":"commas"},{"level":2,"title":"Semicolons","slug":"semicolons"},{"level":2,"title":"Type Casting & Coercion","slug":"type-casting-coercion"},{"level":2,"title":"Naming Conventions","slug":"naming-conventions"},{"level":2,"title":"Accessors","slug":"accessors"},{"level":2,"title":"Events","slug":"events"},{"level":2,"title":"jQuery","slug":"jquery"},{"level":2,"title":"ECMAScript 5 Compatibility","slug":"ecmascript-5-compatibility"},{"level":2,"title":"ECMAScript 6+ (ES 2015+) Styles","slug":"ecmascript-6-es-2015-styles"},{"level":2,"title":"Standard Library","slug":"standard-library"},{"level":2,"title":"Testing","slug":"testing"},{"level":2,"title":"Performance","slug":"performance"},{"level":2,"title":"Resources","slug":"resources"},{"level":2,"title":"In the Wild","slug":"in-the-wild"},{"level":2,"title":"Translation","slug":"translation"},{"level":2,"title":"The JavaScript Style Guide Guide","slug":"the-javascript-style-guide-guide"},{"level":2,"title":"Chat With Us About JavaScript","slug":"chat-with-us-about-javascript"},{"level":2,"title":"Contributors","slug":"contributors"},{"level":2,"title":"License","slug":"license"},{"level":2,"title":"Amendments","slug":"amendments"}],"relativePath":"home/font-endSpecification/airbnb/index.md","lastUpdated":1632159086154}',e={},c=t('<h1 id="airbnb-javascript-style-guide" tabindex="-1">Airbnb JavaScript Style Guide <a class="header-anchor" href="#airbnb-javascript-style-guide" aria-hidden="true">#</a></h1><p><em>A mostly reasonable approach to JavaScript</em></p><blockquote><p><strong>Note</strong>: this guide assumes you are using <a href="https://babeljs.io" target="_blank" rel="noopener noreferrer">Babel</a>, and requires that you use <a href="https://npmjs.com/babel-preset-airbnb" target="_blank" rel="noopener noreferrer">babel-preset-airbnb</a> or the equivalent. It also assumes you are installing shims/polyfills in your app, with <a href="https://npmjs.com/airbnb-browser-shims" target="_blank" rel="noopener noreferrer">airbnb-browser-shims</a> or the equivalent.</p></blockquote><p><a href="https://www.npmjs.com/package/eslint-config-airbnb" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/dm/eslint-config-airbnb.svg" alt="Downloads"></a><a href="https://www.npmjs.com/package/eslint-config-airbnb-base" target="_blank" rel="noopener noreferrer"><img src="https://img.shields.io/npm/dm/eslint-config-airbnb-base.svg" alt="Downloads"></a><a href="https://gitter.im/airbnb/javascript?utm_source=badge&amp;utm_medium=badge&amp;utm_campaign=pr-badge" target="_blank" rel="noopener noreferrer"><img src="https://badges.gitter.im/Join%20Chat.svg" alt="Gitter"></a></p><p>This guide is available in other languages too. See <a href="#translation">Translation</a></p><p>Other Style Guides</p><ul><li><a href="https://github.com/airbnb/javascript/tree/es5-deprecated/es5" target="_blank" rel="noopener noreferrer">ES5 (Deprecated)</a>\x3c!-- - [React](react/) --\x3e\x3c!-- - [CSS-in-JavaScript](css-in-javascript/) --\x3e</li><li><a href="https://github.com/airbnb/css" target="_blank" rel="noopener noreferrer">CSS &amp; Sass</a></li><li><a href="https://github.com/airbnb/ruby" target="_blank" rel="noopener noreferrer">Ruby</a></li></ul><h2 id="table-of-contents" tabindex="-1">Table of Contents <a class="header-anchor" href="#table-of-contents" aria-hidden="true">#</a></h2><ol><li><a href="#types">Types</a></li><li><a href="#references">References</a></li><li><a href="#objects">Objects</a></li><li><a href="#arrays">Arrays</a></li><li><a href="#destructuring">Destructuring</a></li><li><a href="#strings">Strings</a></li><li><a href="#functions">Functions</a></li><li><a href="#arrow-functions">Arrow Functions</a></li><li><a href="#classes--constructors">Classes &amp; Constructors</a></li><li><a href="#modules">Modules</a></li><li><a href="#iterators-and-generators">Iterators and Generators</a></li><li><a href="#properties">Properties</a></li><li><a href="#variables">Variables</a></li><li><a href="#hoisting">Hoisting</a></li><li><a href="#comparison-operators--equality">Comparison Operators &amp; Equality</a></li><li><a href="#blocks">Blocks</a></li><li><a href="#control-statements">Control Statements</a></li><li><a href="#comments">Comments</a></li><li><a href="#whitespace">Whitespace</a></li><li><a href="#commas">Commas</a></li><li><a href="#semicolons">Semicolons</a></li><li><a href="#type-casting--coercion">Type Casting &amp; Coercion</a></li><li><a href="#naming-conventions">Naming Conventions</a></li><li><a href="#accessors">Accessors</a></li><li><a href="#events">Events</a></li><li><a href="#jquery">jQuery</a></li><li><a href="#ecmascript-5-compatibility">ECMAScript 5 Compatibility</a></li><li><a href="#ecmascript-6-es-2015-styles">ECMAScript 6+ (ES 2015+) Styles</a></li><li><a href="#standard-library">Standard Library</a></li><li><a href="#testing">Testing</a></li><li><a href="#performance">Performance</a></li><li><a href="#resources">Resources</a></li><li><a href="#in-the-wild">In the Wild</a></li><li><a href="#translation">Translation</a></li><li><a href="#the-javascript-style-guide-guide">The JavaScript Style Guide Guide</a></li><li><a href="#chat-with-us-about-javascript">Chat With Us About JavaScript</a></li><li><a href="#contributors">Contributors</a></li><li><a href="#license">License</a></li><li><a href="#amendments">Amendments</a></li></ol><h2 id="types" tabindex="-1">Types <a class="header-anchor" href="#types" aria-hidden="true">#</a></h2><p><a name="types--primitives"></a><a name="1.1"></a></p><ul><li><p><a href="#types--primitives">1.1</a> <strong>Primitives</strong>: When you access a primitive type you work directly on its value.</p><ul><li><code>string</code></li><li><code>number</code></li><li><code>boolean</code></li><li><code>null</code></li><li><code>undefined</code></li><li><code>symbol</code></li><li><code>bigint</code></li></ul><div class="language-javascript"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n\nbar <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 1, 9</span>\n</code></pre></div><ul><li>Symbols and BigInts cannot be faithfully polyfilled, so they should not be used when targeting browsers/environments that don’t support them natively.</li></ul></li></ul><p><a name="types--complex"></a><a name="1.2"></a></p><ul><li><p><a href="#types--complex">1.2</a> <strong>Complex</strong>: When you access a complex type you work on a reference to its value.</p><ul><li><code>object</code></li><li><code>array</code></li><li><code>function</code></li></ul><div class="language-javascript"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> foo<span class="token punctuation">;</span>\n\nbar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> bar<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 9, 9</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="references" tabindex="-1">References <a class="header-anchor" href="#references" aria-hidden="true">#</a></h2><p><a name="references--prefer-const"></a><a name="2.1"></a></p><ul><li><p><a href="#references--prefer-const">2.1</a> Use <code>const</code> for all of your references; avoid using <code>var</code>. eslint: <a href="https://eslint.org/docs/rules/prefer-const.html" target="_blank" rel="noopener noreferrer"><code>prefer-const</code></a>, <a href="https://eslint.org/docs/rules/no-const-assign.html" target="_blank" rel="noopener noreferrer"><code>no-const-assign</code></a></p><blockquote><p>Why? This ensures that you can’t reassign your references, which can lead to bugs and difficult to comprehend code.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="references--disallow-var"></a><a name="2.2"></a></p><ul><li><p><a href="#references--disallow-var">2.2</a> If you must reassign references, use <code>let</code> instead of <code>var</code>. eslint: <a href="https://eslint.org/docs/rules/no-var.html" target="_blank" rel="noopener noreferrer"><code>no-var</code></a></p><blockquote><p>Why? <code>let</code> is block-scoped rather than function-scoped like <code>var</code>.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good, use the let.</span>\n<span class="token keyword">let</span> count <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="references--block-scope"></a><a name="2.3"></a></p><ul><li><p><a href="#references--block-scope">2.3</a> Note that both <code>let</code> and <code>const</code> are block-scoped, whereas <code>var</code> is function-scoped.</p><div class="language-javascript"><pre><code><span class="token comment">// const and let only exist in the blocks they are defined in.</span>\n<span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Prints 1</span>\n</code></pre></div><p>In the above code, you can see that referencing <code>a</code> and <code>b</code> will produce a ReferenceError, while <code>c</code> contains the number. This is because <code>a</code> and <code>b</code> are block scoped, while <code>c</code> is scoped to the containing function.</p></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="objects" tabindex="-1">Objects <a class="header-anchor" href="#objects" aria-hidden="true">#</a></h2><p><a name="objects--no-new"></a><a name="3.1"></a></p><ul><li><p><a href="#objects--no-new">3.1</a> Use the literal syntax for object creation. eslint: <a href="https://eslint.org/docs/rules/no-new-object.html" target="_blank" rel="noopener noreferrer"><code>no-new-object</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> item <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="es6-computed-properties"></a><a name="3.4"></a></p><ul><li><p><a href="#es6-computed-properties">3.2</a> Use computed property names when creating objects with dynamic property names.</p><blockquote><p>Why? They allow you to define all the properties of an object in one place.</p></blockquote><div class="language-javascript"><pre><code>\n<span class="token keyword">function</span> <span class="token function">getKey</span><span class="token punctuation">(</span><span class="token parameter">k</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">a key named </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>k<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\nobj<span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;San Francisco&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">[</span><span class="token function">getKey</span><span class="token punctuation">(</span><span class="token string">&#39;enabled&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="es6-object-shorthand"></a><a name="3.5"></a></p><ul><li><p><a href="#es6-object-shorthand">3.3</a> Use object method shorthand. eslint: <a href="https://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener noreferrer"><code>object-shorthand</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\n  <span class="token function-variable function">addValue</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> atom<span class="token punctuation">.</span>value <span class="token operator">+</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> atom <span class="token operator">=</span> <span class="token punctuation">{</span>\n  value<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n\n  <span class="token function">addValue</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> atom<span class="token punctuation">.</span>value <span class="token operator">+</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="es6-object-concise"></a><a name="3.6"></a></p><ul><li><p><a href="#es6-object-concise">3.4</a> Use property value shorthand. eslint: <a href="https://eslint.org/docs/rules/object-shorthand.html" target="_blank" rel="noopener noreferrer"><code>object-shorthand</code></a></p><blockquote><p>Why? It is shorter and descriptive.</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">const</span> lukeSkywalker <span class="token operator">=</span> <span class="token string">&#39;Luke Skywalker&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lukeSkywalker<span class="token operator">:</span> lukeSkywalker<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lukeSkywalker<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="objects--grouped-shorthand"></a><a name="3.7"></a></p><ul><li><p><a href="#objects--grouped-shorthand">3.5</a> Group your shorthand properties at the beginning of your object declaration.</p><blockquote><p>Why? It’s easier to tell which properties are using the shorthand.</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">const</span> anakinSkywalker <span class="token operator">=</span> <span class="token string">&#39;Anakin Skywalker&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> lukeSkywalker <span class="token operator">=</span> <span class="token string">&#39;Luke Skywalker&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  episodeOne<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  twoJediWalkIntoACantina<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  lukeSkywalker<span class="token punctuation">,</span>\n  episodeThree<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  mayTheFourth<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  anakinSkywalker<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  lukeSkywalker<span class="token punctuation">,</span>\n  anakinSkywalker<span class="token punctuation">,</span>\n  episodeOne<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  twoJediWalkIntoACantina<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  episodeThree<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  mayTheFourth<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="objects--quoted-props"></a><a name="3.8"></a></p><ul><li><p><a href="#objects--quoted-props">3.6</a> Only quote properties that are invalid identifiers. eslint: <a href="https://eslint.org/docs/rules/quote-props.html" target="_blank" rel="noopener noreferrer"><code>quote-props</code></a></p><blockquote><p>Why? In general we consider it subjectively easier to read. It improves syntax highlighting, and is also more easily optimized by many JS engines.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> bad <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token string">&#39;foo&#39;</span><span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;bar&#39;</span><span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> good <span class="token operator">=</span> <span class="token punctuation">{</span>\n  foo<span class="token operator">:</span> <span class="token number">3</span><span class="token punctuation">,</span>\n  bar<span class="token operator">:</span> <span class="token number">4</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;data-blah&#39;</span><span class="token operator">:</span> <span class="token number">5</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="objects--prototype-builtins"></a></p><ul><li><p><a href="#objects--prototype-builtins">3.7</a> Do not call <code>Object.prototype</code> methods directly, such as <code>hasOwnProperty</code>, <code>propertyIsEnumerable</code>, and <code>isPrototypeOf</code>. eslint: <a href="https://eslint.org/docs/rules/no-prototype-builtins" target="_blank" rel="noopener noreferrer"><code>no-prototype-builtins</code></a></p><blockquote><p>Why? These methods may be shadowed by properties on the object in question - consider <code>{ hasOwnProperty: false }</code> - or, the object may be a null object (<code>Object.create(null)</code>).</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>object<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> has <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>hasOwnProperty<span class="token punctuation">;</span> <span class="token comment">// cache the lookup once, in module scope.</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">has</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token comment">/* or */</span>\n<span class="token keyword">import</span> has <span class="token keyword">from</span> <span class="token string">&#39;has&#39;</span><span class="token punctuation">;</span> <span class="token comment">// https://www.npmjs.com/package/has</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">has</span><span class="token punctuation">(</span>object<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="objects--rest-spread"></a></p><ul><li><p><a href="#objects--rest-spread">3.8</a> Prefer the object spread syntax over <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Object/assign" target="_blank" rel="noopener noreferrer"><code>Object.assign</code></a> to shallow-copy objects. Use the object rest operator to get a new object with certain properties omitted. eslint: <a href="https://eslint.org/docs/rules/prefer-object-spread" target="_blank" rel="noopener noreferrer"><code>prefer-object-spread</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// very bad</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>original<span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// this mutates `original` ಠ_ಠ</span>\n<span class="token keyword">delete</span> copy<span class="token punctuation">.</span>a<span class="token punctuation">;</span> <span class="token comment">// so does this</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> original<span class="token punctuation">,</span> <span class="token punctuation">{</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> original <span class="token operator">=</span> <span class="token punctuation">{</span> a<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> b<span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> copy <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token operator">...</span>original<span class="token punctuation">,</span> c<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span> <span class="token comment">// copy =&gt; { a: 1, b: 2, c: 3 }</span>\n\n<span class="token keyword">const</span> <span class="token punctuation">{</span> a<span class="token punctuation">,</span> <span class="token operator">...</span>noA <span class="token punctuation">}</span> <span class="token operator">=</span> copy<span class="token punctuation">;</span> <span class="token comment">// noA =&gt; { b: 2, c: 3 }</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="arrays" tabindex="-1">Arrays <a class="header-anchor" href="#arrays" aria-hidden="true">#</a></h2><p><a name="arrays--literals"></a><a name="4.1"></a></p><ul><li><p><a href="#arrays--literals">4.1</a> Use the literal syntax for array creation. eslint: <a href="https://eslint.org/docs/rules/no-array-constructor.html" target="_blank" rel="noopener noreferrer"><code>no-array-constructor</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrays--push"></a><a name="4.2"></a></p><ul><li><p><a href="#arrays--push">4.2</a> Use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/push" target="_blank" rel="noopener noreferrer">Array#push</a> instead of direct assignment to add items to an array.</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> someStack <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\nsomeStack<span class="token punctuation">[</span>someStack<span class="token punctuation">.</span>length<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">&#39;abracadabra&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\nsomeStack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token string">&#39;abracadabra&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="es6-array-spreads"></a><a name="4.3"></a></p><ul><li><p><a href="#es6-array-spreads">4.3</a> Use array spreads <code>...</code> to copy arrays.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> len <span class="token operator">=</span> items<span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n<span class="token keyword">const</span> itemsCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> i<span class="token punctuation">;</span>\n\n<span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  itemsCopy<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> items<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> itemsCopy <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>items<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrays--from"></a><a name="arrays--from-iterable"></a><a name="4.4"></a></p><ul><li><p><a href="#arrays--from-iterable">4.4</a> To convert an iterable object to an array, use spreads <code>...</code> instead of <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener noreferrer"><code>Array.from</code></a>.</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> foo <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">&#39;.foo&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> nodes <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> nodes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>foo<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrays--from-array-like"></a></p><ul><li><p><a href="#arrays--from-array-like">4.5</a> Use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener noreferrer"><code>Array.from</code></a> for converting an array-like object to an array.</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> arrLike <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token number">0</span><span class="token operator">:</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token string">&#39;baz&#39;</span><span class="token punctuation">,</span> length<span class="token operator">:</span> <span class="token number">3</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>arrLike<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrays--mapping"></a></p><ul><li><p><a href="#arrays--mapping">4.6</a> Use <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/from" target="_blank" rel="noopener noreferrer"><code>Array.from</code></a> instead of spread <code>...</code> for mapping over iterables, because it avoids creating an intermediate array.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>foo<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> Array<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrays--callback-return"></a><a name="4.5"></a></p><ul><li><p><a href="#arrays--callback-return">4.7</a> Use return statements in array method callbacks. It’s ok to omit the return if the function body consists of a single statement returning an expression without side effects, following <a href="#arrows--implicit-return">8.2</a>. eslint: <a href="https://eslint.org/docs/rules/array-callback-return" target="_blank" rel="noopener noreferrer"><code>array-callback-return</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad - no returned value means `acc` becomes undefined after the first iteration</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> flatten <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">acc<span class="token punctuation">,</span> item<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> flatten <span class="token operator">=</span> acc<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> flatten<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\ninbox<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> subject<span class="token punctuation">,</span> author <span class="token punctuation">}</span> <span class="token operator">=</span> msg<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>subject <span class="token operator">===</span> <span class="token string">&#39;Mockingbird&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> author <span class="token operator">===</span> <span class="token string">&#39;Harper Lee&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\ninbox<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> subject<span class="token punctuation">,</span> author <span class="token punctuation">}</span> <span class="token operator">=</span> msg<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>subject <span class="token operator">===</span> <span class="token string">&#39;Mockingbird&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> author <span class="token operator">===</span> <span class="token string">&#39;Harper Lee&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrays--bracket-newline"></a></p><ul><li><p><a href="#arrays--bracket-newline">4.8</a> Use line breaks after open and before close array brackets if an array has multiple lines</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> objectInArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> numberInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> objectInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token punctuation">{</span>\n    id<span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> numberInArray <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token number">1</span><span class="token punctuation">,</span>\n  <span class="token number">2</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="destructuring" tabindex="-1">Destructuring <a class="header-anchor" href="#destructuring" aria-hidden="true">#</a></h2><p><a name="destructuring--object"></a><a name="5.1"></a></p><ul><li><p><a href="#destructuring--object">5.1</a> Use object destructuring when accessing and using multiple properties of an object. eslint: <a href="https://eslint.org/docs/rules/prefer-destructuring" target="_blank" rel="noopener noreferrer"><code>prefer-destructuring</code></a></p><blockquote><p>Why? Destructuring saves you from creating temporary references for those properties, and from repetitive access of the object. Repeating object access creates more repetitive code, requires more reading, and creates more opportunities for mistakes. Destructuring objects also provides a single site of definition of the object structure that is used in the block, rather than requiring reading the entire block to determine what is used.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> firstName <span class="token operator">=</span> user<span class="token punctuation">.</span>firstName<span class="token punctuation">;</span>\n  <span class="token keyword">const</span> lastName <span class="token operator">=</span> user<span class="token punctuation">.</span>lastName<span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter">user</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span> <span class="token operator">=</span> user<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">function</span> <span class="token function">getFullName</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">{</span> firstName<span class="token punctuation">,</span> lastName <span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>firstName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string"> </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>lastName<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="destructuring--array"></a><a name="5.2"></a></p><ul><li><p><a href="#destructuring--array">5.2</a> Use array destructuring. eslint: <a href="https://eslint.org/docs/rules/prefer-destructuring" target="_blank" rel="noopener noreferrer"><code>prefer-destructuring</code></a></p><div class="language-javascript"><pre><code><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> first <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> second <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>first<span class="token punctuation">,</span> second<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="destructuring--object-over-array"></a><a name="5.3"></a></p><ul><li><p><a href="#destructuring--object-over-array">5.3</a> Use object destructuring for multiple return values, not array destructuring.</p><blockquote><p>Why? You can add new properties over time or change the order of things without breaking call sites.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// then a miracle occurs</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// the caller needs to think about the order of return data</span>\n<span class="token keyword">const</span> <span class="token punctuation">[</span>left<span class="token punctuation">,</span> __<span class="token punctuation">,</span> top<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">processInput</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">processInput</span><span class="token punctuation">(</span><span class="token parameter">input</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// then a miracle occurs</span>\n  <span class="token keyword">return</span> <span class="token punctuation">{</span> left<span class="token punctuation">,</span> right<span class="token punctuation">,</span> top<span class="token punctuation">,</span> bottom <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// the caller selects only the data they need</span>\n<span class="token keyword">const</span> <span class="token punctuation">{</span> left<span class="token punctuation">,</span> top <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">processInput</span><span class="token punctuation">(</span>input<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="strings" tabindex="-1">Strings <a class="header-anchor" href="#strings" aria-hidden="true">#</a></h2><p><a name="strings--quotes"></a><a name="6.1"></a></p><ul><li><p><a href="#strings--quotes">6.1</a> Use single quotes <code>&#39;&#39;</code> for strings. eslint: <a href="https://eslint.org/docs/rules/quotes.html" target="_blank" rel="noopener noreferrer"><code>quotes</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&quot;Capt. Janeway&quot;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad - template literals should contain interpolation or newlines</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Capt. Janeway</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">&#39;Capt. Janeway&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="strings--line-length"></a><a name="6.2"></a></p><ul><li><p><a href="#strings--line-length">6.2</a> Strings that cause the line to go over 100 characters should not be written across multiple lines using string concatenation.</p><blockquote><p>Why? Broken strings are painful to work with and make code less searchable.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token string">&#39;This is a super long error that was thrown because \\\nof Batman. When you stop to think about how Batman had anything to do \\\nwith this, you would get nowhere \\\nfast.&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token string">&#39;This is a super long error that was thrown because &#39;</span> <span class="token operator">+</span>\n  <span class="token string">&#39;of Batman. When you stop to think about how Batman had anything to do &#39;</span> <span class="token operator">+</span>\n  <span class="token string">&#39;with this, you would get nowhere fast.&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> errorMessage <span class="token operator">=</span> <span class="token string">&#39;This is a super long error that was thrown because of Batman. When you stop to think about how Batman had anything to do with this, you would get nowhere fast.&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="es6-template-literals"></a><a name="6.4"></a></p><ul><li><p><a href="#es6-template-literals">6.3</a> When programmatically building up strings, use template strings instead of concatenation. eslint: <a href="https://eslint.org/docs/rules/prefer-template.html" target="_blank" rel="noopener noreferrer"><code>prefer-template</code></a> <a href="https://eslint.org/docs/rules/template-curly-spacing" target="_blank" rel="noopener noreferrer"><code>template-curly-spacing</code></a></p><blockquote><p>Why? Template strings give you a readable, concise syntax with proper newlines and string interpolation features.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;How are you, &#39;</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token string">&#39;How are you, &#39;</span><span class="token punctuation">,</span> name<span class="token punctuation">,</span> <span class="token string">&#39;?&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">How are you, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span> name <span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token parameter">name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">How are you, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">?</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="strings--eval"></a><a name="6.5"></a></p><ul><li><a href="#strings--eval">6.4</a> Never use <code>eval()</code> on a string, it opens too many vulnerabilities. eslint: <a href="https://eslint.org/docs/rules/no-eval" target="_blank" rel="noopener noreferrer"><code>no-eval</code></a></li></ul><p><a name="strings--escaping"></a></p><ul><li><p><a href="#strings--escaping">6.5</a> Do not unnecessarily escape characters in strings. eslint: <a href="https://eslint.org/docs/rules/no-useless-escape" target="_blank" rel="noopener noreferrer"><code>no-useless-escape</code></a></p><blockquote><p>Why? Backslashes harm readability, thus they should only be present when necessary.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;\\&#39;this\\&#39; \\i\\s \\&quot;quoted\\&quot;&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;\\&#39;this\\&#39; is &quot;quoted&quot;&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">my name is &#39;</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>name<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">&#39;</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="functions" tabindex="-1">Functions <a class="header-anchor" href="#functions" aria-hidden="true">#</a></h2><p><a name="functions--declarations"></a><a name="7.1"></a></p><ul><li><p><a href="#functions--declarations">7.1</a> Use named function expressions instead of function declarations. eslint: <a href="https://eslint.org/docs/rules/func-style" target="_blank" rel="noopener noreferrer"><code>func-style</code></a></p><blockquote><p>Why? Function declarations are hoisted, which means that it’s easy - too easy - to reference the function before it is defined in the file. This harms readability and maintainability. If you find that a function’s definition is large or complex enough that it is interfering with understanding the rest of the file, then perhaps it’s time to extract it to its own module! Don’t forget to explicitly name the expression, regardless of whether or not the name is inferred from the containing variable (which is often the case in modern browsers or when using compilers such as Babel). This eliminates any assumptions made about the Error’s call stack. (<a href="https://github.com/airbnb/javascript/issues/794" target="_blank" rel="noopener noreferrer">Discussion</a>)</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// lexical name distinguished from the variable-referenced invocation(s)</span>\n<span class="token keyword">const</span> <span class="token function-variable function">short</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">longUniqueMoreDescriptiveLexicalFoo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="functions--iife"></a><a name="7.2"></a></p><ul><li><p><a href="#functions--iife">7.2</a> Wrap immediately invoked function expressions in parentheses. eslint: <a href="https://eslint.org/docs/rules/wrap-iife.html" target="_blank" rel="noopener noreferrer"><code>wrap-iife</code></a></p><blockquote><p>Why? An immediately invoked function expression is a single unit - wrapping both it, and its invocation parens, in parens, cleanly expresses this. Note that in a world with modules everywhere, you almost never need an IIFE.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// immediately-invoked function expression (IIFE)</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Welcome to the Internet. Please follow me.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="functions--in-blocks"></a><a name="7.3"></a></p><ul><li><a href="#functions--in-blocks">7.3</a> Never declare a function in a non-function block (<code>if</code>, <code>while</code>, etc). Assign the function to a variable instead. Browsers will allow you to do it, but they all interpret it differently, which is bad news bears. eslint: <a href="https://eslint.org/docs/rules/no-loop-func.html" target="_blank" rel="noopener noreferrer"><code>no-loop-func</code></a></li></ul><p><a name="functions--note-on-blocks"></a><a name="7.4"></a></p><ul><li><p><a href="#functions--note-on-blocks">7.4</a> <strong>Note:</strong> ECMA-262 defines a <code>block</code> as a list of statements. A function declaration is not a statement.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Nope.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">let</span> test<span class="token punctuation">;</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>currentUser<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function-variable function">test</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Yup.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="functions--arguments-shadow"></a><a name="7.5"></a></p><ul><li><p><a href="#functions--arguments-shadow">7.5</a> Never name a parameter <code>arguments</code>. This will take precedence over the <code>arguments</code> object that is given to every function scope.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> arguments</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> options<span class="token punctuation">,</span> args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="es6-rest"></a><a name="7.6"></a></p><ul><li><p><a href="#es6-rest">7.6</a> Never use <code>arguments</code>, opt to use rest syntax <code>...</code> instead. eslint: <a href="https://eslint.org/docs/rules/prefer-rest-params" target="_blank" rel="noopener noreferrer"><code>prefer-rest-params</code></a></p><blockquote><p>Why? <code>...</code> is explicit about which arguments you want pulled. Plus, rest arguments are a real Array, and not merely Array-like like <code>arguments</code>.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">concatenateAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> args <span class="token operator">=</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">concatenateAll</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> args<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="es6-default-parameters"></a><a name="7.7"></a></p><ul><li><p><a href="#es6-default-parameters">7.7</a> Use default parameter syntax rather than mutating function arguments.</p><div class="language-javascript"><pre><code><span class="token comment">// really bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// No! We shouldn’t mutate function arguments.</span>\n  <span class="token comment">// Double bad: if opts is falsy it&#39;ll be set to an object which may</span>\n  <span class="token comment">// be what you want but it can introduce subtle bugs.</span>\n  opts <span class="token operator">=</span> opts <span class="token operator">||</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// still bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>opts <span class="token operator">===</span> <span class="token keyword">void</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="functions--default-side-effects"></a><a name="7.8"></a></p><ul><li><p><a href="#functions--default-side-effects">7.8</a> Avoid side effects with default parameters.</p><blockquote><p>Why? They are confusing to reason about.</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">count</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> b<span class="token operator">++</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 1</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 2</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 3</span>\n<span class="token function">count</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 3</span>\n</code></pre></div></li></ul><p><a name="functions--defaults-last"></a><a name="7.9"></a></p><ul><li><p><a href="#functions--defaults-last">7.9</a> Always put default parameters last. eslint: <a href="https://eslint.org/docs/rules/default-param-last" target="_blank" rel="noopener noreferrer"><code>default-param-last</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> name</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">handleThings</span><span class="token punctuation">(</span><span class="token parameter">name<span class="token punctuation">,</span> opts <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="functions--constructor"></a><a name="7.10"></a></p><ul><li><p><a href="#functions--constructor">7.10</a> Never use the Function constructor to create a new function. eslint: <a href="https://eslint.org/docs/rules/no-new-func" target="_blank" rel="noopener noreferrer"><code>no-new-func</code></a></p><blockquote><p>Why? Creating a function in this way evaluates a string similarly to <code>eval()</code>, which opens vulnerabilities.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> add <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a + b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// still bad</span>\n<span class="token keyword">var</span> subtract <span class="token operator">=</span> <span class="token function">Function</span><span class="token punctuation">(</span><span class="token string">&#39;a&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;b&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;return a - b&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="functions--signature-spacing"></a><a name="7.11"></a></p><ul><li><p><a href="#functions--signature-spacing">7.11</a> Spacing in a function signature. eslint: <a href="https://eslint.org/docs/rules/space-before-function-paren" target="_blank" rel="noopener noreferrer"><code>space-before-function-paren</code></a> <a href="https://eslint.org/docs/rules/space-before-blocks" target="_blank" rel="noopener noreferrer"><code>space-before-blocks</code></a></p><blockquote><p>Why? Consistency is good, and you shouldn’t have to add or remove a space when adding or removing a name.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">f</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">g</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">h</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">x</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> <span class="token function-variable function">y</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">a</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="functions--mutate-params"></a><a name="7.12"></a></p><ul><li><p><a href="#functions--mutate-params">7.12</a> Never mutate parameters. eslint: <a href="https://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="noopener noreferrer"><code>no-param-reassign</code></a></p><blockquote><p>Why? Manipulating objects passed in as parameters can cause unwanted variable side effects in the original caller.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  obj<span class="token punctuation">.</span>key <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">obj</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> key <span class="token operator">=</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">&#39;key&#39;</span><span class="token punctuation">)</span> <span class="token operator">?</span> obj<span class="token punctuation">.</span>key <span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="functions--reassign-params"></a><a name="7.13"></a></p><ul><li><p><a href="#functions--reassign-params">7.13</a> Never reassign parameters. eslint: <a href="https://eslint.org/docs/rules/no-param-reassign.html" target="_blank" rel="noopener noreferrer"><code>no-param-reassign</code></a></p><blockquote><p>Why? Reassigning parameters can lead to unexpected behavior, especially when accessing the <code>arguments</code> object. It can also cause optimization issues, especially in V8.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">f1</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">f2</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>a<span class="token punctuation">)</span> <span class="token punctuation">{</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">f3</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> b <span class="token operator">=</span> a <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">function</span> <span class="token function">f4</span><span class="token punctuation">(</span><span class="token parameter">a <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="functions--spread-vs-apply"></a><a name="7.14"></a></p><ul><li><p><a href="#functions--spread-vs-apply">7.14</a> Prefer the use of the spread syntax <code>...</code> to call variadic functions. eslint: <a href="https://eslint.org/docs/rules/prefer-spread" target="_blank" rel="noopener noreferrer"><code>prefer-spread</code></a></p><blockquote><p>Why? It’s cleaner, you don’t need to supply a context, and you can not easily compose <code>new</code> with <code>apply</code>.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>console<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">new</span> <span class="token punctuation">(</span><span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>Date<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2016</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="functions--signature-invocation-indentation"></a></p><ul><li><p><a href="#functions--signature-invocation-indentation">7.15</a> Functions with multiline signatures, or invocations, should be indented just like every other multiline list in this guide: with each item on a line by itself, with a trailing comma on the last item. eslint: <a href="https://eslint.org/docs/rules/function-paren-newline" target="_blank" rel="noopener noreferrer"><code>function-paren-newline</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">bar<span class="token punctuation">,</span>\n             baz<span class="token punctuation">,</span>\n             quux</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span>\n  <span class="token parameter">bar<span class="token punctuation">,</span>\n  baz<span class="token punctuation">,</span>\n  quux<span class="token punctuation">,</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span>\n  bar<span class="token punctuation">,</span>\n  baz<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>\n  foo<span class="token punctuation">,</span>\n  bar<span class="token punctuation">,</span>\n  baz<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="arrow-functions" tabindex="-1">Arrow Functions <a class="header-anchor" href="#arrow-functions" aria-hidden="true">#</a></h2><p><a name="arrows--use-them"></a><a name="8.1"></a></p><ul><li><p><a href="#arrows--use-them">8.1</a> When you must use an anonymous function (as when passing an inline callback), use arrow function notation. eslint: <a href="https://eslint.org/docs/rules/prefer-arrow-callback.html" target="_blank" rel="noopener noreferrer"><code>prefer-arrow-callback</code></a>, <a href="https://eslint.org/docs/rules/arrow-spacing.html" target="_blank" rel="noopener noreferrer"><code>arrow-spacing</code></a></p><blockquote><p>Why? It creates a version of the function that executes in the context of <code>this</code>, which is usually what you want, and is a more concise syntax.</p></blockquote><blockquote><p>Why not? If you have a fairly complicated function, you might move that logic out into its own named function expression.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrows--implicit-return"></a><a name="8.2"></a></p><ul><li><p><a href="#arrows--implicit-return">8.2</a> If the function body consists of a single statement returning an <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators#Expressions" target="_blank" rel="noopener noreferrer">expression</a> without side effects, omit the braces and use the implicit return. Otherwise, keep the braces and use a <code>return</code> statement. eslint: <a href="https://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="noopener noreferrer"><code>arrow-parens</code></a>, <a href="https://eslint.org/docs/rules/arrow-body-style.html" target="_blank" rel="noopener noreferrer"><code>arrow-body-style</code></a></p><blockquote><p>Why? Syntactic sugar. It reads well when multiple functions are chained together.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> nextNumber <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> nextNumber <span class="token operator">=</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A string containing the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>nextNumber<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">.</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number<span class="token punctuation">,</span> index</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>\n  <span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">:</span> number<span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// No implicit return with side effects</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token parameter">callback</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">callback</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>val <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// Do something if callback returns true</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">let</span> bool <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  bool <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrows--paren-wrap"></a><a name="8.3"></a></p><ul><li><p><a href="#arrows--paren-wrap">8.3</a> In case the expression spans over multiple lines, wrap it in parentheses for better readability.</p><blockquote><p>Why? It shows clearly where the function starts and ends.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">httpMethod</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>\n    httpMagicObjectWithAVeryLongName<span class="token punctuation">,</span>\n    httpMethod<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token string">&#39;get&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;post&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;put&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">httpMethod</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>\n    httpMagicObjectWithAVeryLongName<span class="token punctuation">,</span>\n    httpMethod<span class="token punctuation">,</span>\n  <span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrows--one-arg-parens"></a><a name="8.4"></a></p><ul><li><p><a href="#arrows--one-arg-parens">8.4</a> Always include parentheses around arguments for clarity and consistency. eslint: <a href="https://eslint.org/docs/rules/arrow-parens.html" target="_blank" rel="noopener noreferrer"><code>arrow-parens</code></a></p><blockquote><p>Why? Minimizes diff churn when adding or removing arguments.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> x <span class="token operator">*</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">number</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A long string with the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. It’s so long that we don’t want it to take up space on the .map line!</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">number</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n  <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">A long string with the </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>number<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">. It’s so long that we don’t want it to take up space on the .map line!</span><span class="token template-punctuation string">`</span></span>\n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">x</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> y <span class="token operator">=</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> x <span class="token operator">*</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="arrows--confusing"></a><a name="8.5"></a></p><ul><li><p><a href="#arrows--confusing">8.5</a> Avoid confusing arrow function syntax (<code>=&gt;</code>) with comparison operators (<code>&lt;=</code>, <code>&gt;=</code>). eslint: <a href="https://eslint.org/docs/rules/no-confusing-arrow" target="_blank" rel="noopener noreferrer"><code>no-confusing-arrow</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>height <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>largeSize <span class="token operator">:</span> item<span class="token punctuation">.</span>smallSize<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> item<span class="token punctuation">.</span>height <span class="token operator">&gt;=</span> <span class="token number">256</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>largeSize <span class="token operator">:</span> item<span class="token punctuation">.</span>smallSize<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span>height <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token operator">?</span> item<span class="token punctuation">.</span>largeSize <span class="token operator">:</span> item<span class="token punctuation">.</span>smallSize<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">itemHeight</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> <span class="token punctuation">{</span> height<span class="token punctuation">,</span> largeSize<span class="token punctuation">,</span> smallSize <span class="token punctuation">}</span> <span class="token operator">=</span> item<span class="token punctuation">;</span>\n  <span class="token keyword">return</span> height <span class="token operator">&lt;=</span> <span class="token number">256</span> <span class="token operator">?</span> largeSize <span class="token operator">:</span> smallSize<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--implicit-arrow-linebreak"></a></p><ul><li><p><a href="#whitespace--implicit-arrow-linebreak">8.6</a> Enforce the location of arrow function bodies with implicit returns. eslint: <a href="https://eslint.org/docs/rules/implicit-arrow-linebreak" target="_blank" rel="noopener noreferrer"><code>implicit-arrow-linebreak</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  bar<span class="token punctuation">;</span>\n\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span>\n  <span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> bar<span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">(</span>\n   bar\n<span class="token punctuation">)</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="classes-constructors" tabindex="-1">Classes &amp; Constructors <a class="header-anchor" href="#classes-constructors" aria-hidden="true">#</a></h2><p><a name="constructors--use-class"></a><a name="9.1"></a></p><ul><li><p><a href="#constructors--use-class">9.1</a> Always use <code>class</code>. Avoid manipulating <code>prototype</code> directly.</p><blockquote><p>Why? <code>class</code> syntax is more concise and easier to reason about.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">Queue</span><span class="token punctuation">(</span><span class="token parameter">contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>contents<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token class-name">Queue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">pop</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">contents <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>queue <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span>contents<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> value<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="constructors--extends"></a><a name="9.2"></a></p><ul><li><p><a href="#constructors--extends">9.2</a> Use <code>extends</code> for inheritance.</p><blockquote><p>Why? It is a built-in way to inherit prototype functionality without breaking <code>instanceof</code>.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> inherits <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;inherits&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">PeekableQueue</span><span class="token punctuation">(</span><span class="token parameter">contents</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">Queue</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> contents<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token function">inherits</span><span class="token punctuation">(</span>PeekableQueue<span class="token punctuation">,</span> Queue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token class-name">PeekableQueue</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">peek</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">PeekableQueue</span> <span class="token keyword">extends</span> <span class="token class-name">Queue</span> <span class="token punctuation">{</span>\n  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>queue<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="constructors--chaining"></a><a name="9.3"></a></p><ul><li><p><a href="#constructors--chaining">9.3</a> Methods can return <code>this</code> to help with method chaining.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token class-name">Jedi</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">jump</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>jumping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token class-name">Jedi</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">setHeight</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nluke<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; true</span>\nluke<span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>jumping <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token parameter">height</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>height <span class="token operator">=</span> height<span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Jedi</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nluke<span class="token punctuation">.</span><span class="token function">jump</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">setHeight</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="constructors--tostring"></a><a name="9.4"></a></p><ul><li><p><a href="#constructors--tostring">9.4</a> It’s okay to write a custom <code>toString()</code> method, just make sure it works successfully and causes no side effects.</p><div class="language-javascript"><pre><code><span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name <span class="token operator">||</span> <span class="token string">&#39;no name&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Jedi - </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="constructors--no-useless"></a><a name="9.5"></a></p><ul><li><p><a href="#constructors--no-useless">9.5</a> Classes have a default constructor if one is not specified. An empty constructor function or one that just delegates to a parent class is unnecessary. eslint: <a href="https://eslint.org/docs/rules/no-useless-constructor" target="_blank" rel="noopener noreferrer"><code>no-useless-constructor</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n  <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Rey</span> <span class="token keyword">extends</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Rey</span> <span class="token keyword">extends</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>args</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token operator">...</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">&#39;Rey&#39;</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="classes--no-duplicate-members"></a></p><ul><li><p><a href="#classes--no-duplicate-members">9.6</a> Avoid duplicate class members. eslint: <a href="https://eslint.org/docs/rules/no-dupe-class-members" target="_blank" rel="noopener noreferrer"><code>no-dupe-class-members</code></a></p><blockquote><p>Why? Duplicate class member declarations will silently prefer the last one - having duplicates is almost certainly a bug.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="classes--methods-use-this"></a></p><ul><li><p><a href="#classes--methods-use-this">9.7</a> Class methods should use <code>this</code> or be made into a static method unless an external library or framework requires using specific non-static methods. Being an instance method should indicate that it behaves differently based on properties of the receiver. eslint: <a href="https://eslint.org/docs/rules/class-methods-use-this" target="_blank" rel="noopener noreferrer"><code>class-methods-use-this</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good - this is used</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>bar<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good - constructor is exempt</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good - static methods aren&#39;t expected to use this</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n  <span class="token keyword">static</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;bar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="modules" tabindex="-1">Modules <a class="header-anchor" href="#modules" aria-hidden="true">#</a></h2><p><a name="modules--use-them"></a><a name="10.1"></a></p><ul><li><p><a href="#modules--use-them">10.1</a> Always use modules (<code>import</code>/<code>export</code>) over a non-standard module system. You can always transpile to your preferred module system.</p><blockquote><p>Why? Modules are the future, let’s start using the future now.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> AirbnbStyleGuide <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nmodule<span class="token punctuation">.</span>exports <span class="token operator">=</span> AirbnbStyleGuide<span class="token punctuation">.</span>es6<span class="token punctuation">;</span>\n\n<span class="token comment">// ok</span>\n<span class="token keyword">import</span> AirbnbStyleGuide <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> AirbnbStyleGuide<span class="token punctuation">.</span>es6<span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--no-wildcard"></a><a name="10.2"></a></p><ul><li><p><a href="#modules--no-wildcard">10.2</a> Do not use wildcard imports.</p><blockquote><p>Why? This makes sure you have a single default export.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> AirbnbStyleGuide <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> AirbnbStyleGuide <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--no-export-from-import"></a><a name="10.3"></a></p><ul><li><p><a href="#modules--no-export-from-import">10.3</a> And do not export directly from an import.</p><blockquote><p>Why? Although the one-liner is concise, having one clear way to import and one clear way to export makes things consistent.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token comment">// filename es6.js</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> es6 <span class="token keyword">as</span> <span class="token keyword">default</span> <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// filename es6.js</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--no-duplicate-imports"></a></p><ul><li><p><a href="#modules--no-duplicate-imports">10.4</a> Only import from a path in one place. eslint: <a href="https://eslint.org/docs/rules/no-duplicate-imports" target="_blank" rel="noopener noreferrer"><code>no-duplicate-imports</code></a></p><blockquote><p>Why? Having multiple lines that import from the same path can make code harder to maintain.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token comment">// … some other imports … //</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo<span class="token punctuation">,</span> <span class="token punctuation">{</span> named1<span class="token punctuation">,</span> named2 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo<span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  named1<span class="token punctuation">,</span>\n  named2<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--no-mutable-exports"></a></p><ul><li><p><a href="#modules--no-mutable-exports">10.5</a> Do not export mutable bindings. eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-mutable-exports.md" target="_blank" rel="noopener noreferrer"><code>import/no-mutable-exports</code></a></p><blockquote><p>Why? Mutation should be avoided in general, but in particular when exporting mutable bindings. While this technique may be needed for some special cases, in general, only constant references should be exported.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>\n<span class="token keyword">export</span> <span class="token punctuation">{</span> foo <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--prefer-default-export"></a></p><ul><li><p><a href="#modules--prefer-default-export">10.6</a> In modules with a single export, prefer default export over named export. eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/prefer-default-export.md" target="_blank" rel="noopener noreferrer"><code>import/prefer-default-export</code></a></p><blockquote><p>Why? To encourage more files that only ever export one thing, which is better for readability and maintainability.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="modules--imports-first"></a></p><ul><li><p><a href="#modules--imports-first">10.7</a> Put all <code>import</code>s above non-import statements. eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/first.md" target="_blank" rel="noopener noreferrer"><code>import/first</code></a></p><blockquote><p>Why? Since <code>import</code>s are hoisted, keeping them all at the top prevents surprising behavior.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\nfoo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;bar&#39;</span><span class="token punctuation">;</span>\n\nfoo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--multiline-imports-over-newlines"></a></p><ul><li><p><a href="#modules--multiline-imports-over-newlines">10.8</a> Multiline imports should be indented just like multiline array and object literals. eslint: <a href="https://eslint.org/docs/rules/object-curly-newline" target="_blank" rel="noopener noreferrer"><code>object-curly-newline</code></a></p><blockquote><p>Why? The curly braces follow the same indentation rules as every other curly brace block in the style guide, as do the trailing commas.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>longNameA<span class="token punctuation">,</span> longNameB<span class="token punctuation">,</span> longNameC<span class="token punctuation">,</span> longNameD<span class="token punctuation">,</span> longNameE<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span>\n  longNameA<span class="token punctuation">,</span>\n  longNameB<span class="token punctuation">,</span>\n  longNameC<span class="token punctuation">,</span>\n  longNameD<span class="token punctuation">,</span>\n  longNameE<span class="token punctuation">,</span>\n<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;path&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--no-webpack-loader-syntax"></a></p><ul><li><p><a href="#modules--no-webpack-loader-syntax">10.9</a> Disallow Webpack loader syntax in module import statements. eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/no-webpack-loader-syntax.md" target="_blank" rel="noopener noreferrer"><code>import/no-webpack-loader-syntax</code></a></p><blockquote><p>Why? Since using Webpack syntax in the imports couples the code to a module bundler. Prefer using the loader syntax in <code>webpack.config.js</code>.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> fooSass <span class="token keyword">from</span> <span class="token string">&#39;css!sass!foo.scss&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> barCss <span class="token keyword">from</span> <span class="token string">&#39;style!css!bar.css&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> fooSass <span class="token keyword">from</span> <span class="token string">&#39;foo.scss&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> barCss <span class="token keyword">from</span> <span class="token string">&#39;bar.css&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="modules--import-extensions"></a></p><ul><li><p><a href="#modules--import-extensions">10.10</a> Do not include JavaScript filename extensions eslint: <a href="https://github.com/benmosher/eslint-plugin-import/blob/master/docs/rules/extensions.md" target="_blank" rel="noopener noreferrer"><code>import/extensions</code></a></p><blockquote><p>Why? Including extensions inhibits refactoring, and inappropriately hardcodes implementation details of the module you&#39;re importing in every consumer.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo.js&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;./bar.jsx&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> baz <span class="token keyword">from</span> <span class="token string">&#39;./baz/index.jsx&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> foo <span class="token keyword">from</span> <span class="token string">&#39;./foo&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> bar <span class="token keyword">from</span> <span class="token string">&#39;./bar&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">import</span> baz <span class="token keyword">from</span> <span class="token string">&#39;./baz&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="iterators-and-generators" tabindex="-1">Iterators and Generators <a class="header-anchor" href="#iterators-and-generators" aria-hidden="true">#</a></h2><p><a name="iterators--nope"></a><a name="11.1"></a></p><ul><li><p><a href="#iterators--nope">11.1</a> Don’t use iterators. Prefer JavaScript’s higher-order functions instead of loops like <code>for-in</code> or <code>for-of</code>. eslint: <a href="https://eslint.org/docs/rules/no-iterator.html" target="_blank" rel="noopener noreferrer"><code>no-iterator</code></a> <a href="https://eslint.org/docs/rules/no-restricted-syntax" target="_blank" rel="noopener noreferrer"><code>no-restricted-syntax</code></a></p><blockquote><p>Why? This enforces our immutable rule. Dealing with pure functions that return values is easier to reason about than side effects.</p></blockquote><blockquote><p>Use <code>map()</code> / <code>every()</code> / <code>filter()</code> / <code>find()</code> / <code>findIndex()</code> / <code>reduce()</code> / <code>some()</code> / ... to iterate over arrays, and <code>Object.keys()</code> / <code>Object.values()</code> / <code>Object.entries()</code> to produce arrays so you can iterate over objects.</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">const</span> numbers <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> num <span class="token keyword">of</span> numbers<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\nsum <span class="token operator">===</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nnumbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  sum <span class="token operator">+=</span> num<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsum <span class="token operator">===</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best (use the functional force)</span>\n<span class="token keyword">const</span> sum <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">total<span class="token punctuation">,</span> num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> total <span class="token operator">+</span> num<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsum <span class="token operator">===</span> <span class="token number">15</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> increasedByOne <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> numbers<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  increasedByOne<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>numbers<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> increasedByOne <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nnumbers<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  increasedByOne<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best (keeping it functional)</span>\n<span class="token keyword">const</span> increasedByOne <span class="token operator">=</span> numbers<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">num</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="generators--nope"></a><a name="11.2"></a></p><ul><li><p><a href="#generators--nope">11.2</a> Don’t use generators for now.</p><blockquote><p>Why? They don’t transpile well to ES5.</p></blockquote></li></ul><p><a name="generators--spacing"></a></p><ul><li><p><a href="#generators--spacing">11.3</a> If you must use generators, or if you disregard <a href="#generators--nope">our advice</a>, make sure their function signature is spaced properly. eslint: <a href="https://eslint.org/docs/rules/generator-star-spacing" target="_blank" rel="noopener noreferrer"><code>generator-star-spacing</code></a></p><blockquote><p>Why? <code>function</code> and <code>*</code> are part of the same conceptual keyword - <code>*</code> is not a modifier for <code>function</code>, <code>function*</code> is a unique construct, different from <code>function</code>.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">bar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">baz</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">quux</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span><span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token operator">*</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// very bad</span>\n<span class="token keyword">function</span>\n<span class="token operator">*</span>\n<span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// very bad</span>\n<span class="token keyword">const</span> <span class="token function-variable function">wat</span> <span class="token operator">=</span> <span class="token keyword">function</span>\n<span class="token operator">*</span>\n<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span><span class="token operator">*</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> <span class="token function-variable function">foo</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="properties" tabindex="-1">Properties <a class="header-anchor" href="#properties" aria-hidden="true">#</a></h2><p><a name="properties--dot"></a><a name="12.1"></a></p><ul><li><p><a href="#properties--dot">12.1</a> Use dot notation when accessing properties. eslint: <a href="https://eslint.org/docs/rules/dot-notation.html" target="_blank" rel="noopener noreferrer"><code>dot-notation</code></a></p><div class="language-javascript"><pre><code><span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span>\n  jedi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> isJedi <span class="token operator">=</span> luke<span class="token punctuation">[</span><span class="token string">&#39;jedi&#39;</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> isJedi <span class="token operator">=</span> luke<span class="token punctuation">.</span>jedi<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="properties--bracket"></a><a name="12.2"></a></p><ul><li><p><a href="#properties--bracket">12.2</a> Use bracket notation <code>[]</code> when accessing properties with a variable.</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span>\n  jedi<span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n  age<span class="token operator">:</span> <span class="token number">28</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">function</span> <span class="token function">getProp</span><span class="token punctuation">(</span><span class="token parameter">prop</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> luke<span class="token punctuation">[</span>prop<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> isJedi <span class="token operator">=</span> <span class="token function">getProp</span><span class="token punctuation">(</span><span class="token string">&#39;jedi&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="es2016-properties--exponentiation-operator"></a></p><ul><li><p><a href="#es2016-properties--exponentiation-operator">12.3</a> Use exponentiation operator <code>**</code> when calculating exponentiations. eslint: <a href="https://eslint.org/docs/rules/no-restricted-properties" target="_blank" rel="noopener noreferrer"><code>no-restricted-properties</code></a>.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> binary <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> binary <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="variables" tabindex="-1">Variables <a class="header-anchor" href="#variables" aria-hidden="true">#</a></h2><p><a name="variables--const"></a><a name="13.1"></a></p><ul><li><p><a href="#variables--const">13.1</a> Always use <code>const</code> or <code>let</code> to declare variables. Not doing so will result in global variables. We want to avoid polluting the global namespace. Captain Planet warned us of that. eslint: <a href="https://eslint.org/docs/rules/no-undef" target="_blank" rel="noopener noreferrer"><code>no-undef</code></a> <a href="https://eslint.org/docs/rules/prefer-const" target="_blank" rel="noopener noreferrer"><code>prefer-const</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\nsuperPower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> superPower <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SuperPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="variables--one-const"></a><a name="13.2"></a></p><ul><li><p><a href="#variables--one-const">13.2</a> Use one <code>const</code> or <code>let</code> declaration per variable or assignment. eslint: <a href="https://eslint.org/docs/rules/one-var.html" target="_blank" rel="noopener noreferrer"><code>one-var</code></a></p><blockquote><p>Why? It’s easier to add new variable declarations this way, and you never have to worry about swapping out a <code>;</code> for a <code>,</code> or introducing punctuation-only diffs. You can also step through each declaration with the debugger, instead of jumping through all of them at once.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">,</span>\n    dragonball <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token comment">// (compare to above, and try to spot the mistake)</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n    dragonball <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> dragonball <span class="token operator">=</span> <span class="token string">&#39;z&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="variables--const-let-group"></a><a name="13.3"></a></p><ul><li><p><a href="#variables--const-let-group">13.3</a> Group all your <code>const</code>s and then group all your <code>let</code>s.</p><blockquote><p>Why? This is helpful when later on you might need to assign a variable depending on one of the previously assigned variables.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">let</span> i<span class="token punctuation">,</span> len<span class="token punctuation">,</span> dragonball<span class="token punctuation">,</span>\n    items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n    goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">let</span> i<span class="token punctuation">;</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> dragonball<span class="token punctuation">;</span>\n<span class="token keyword">const</span> goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> len<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> goSportsTeam <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> dragonball<span class="token punctuation">;</span>\n<span class="token keyword">let</span> i<span class="token punctuation">;</span>\n<span class="token keyword">let</span> length<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="variables--define-where-used"></a><a name="13.4"></a></p><ul><li><p><a href="#variables--define-where-used">13.4</a> Assign variables where you need them, but place them in a reasonable place.</p><blockquote><p>Why? <code>let</code> and <code>const</code> are block scoped and not function scoped.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad - unnecessary function call</span>\n<span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token parameter">hasName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasName <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">checkName</span><span class="token punctuation">(</span><span class="token parameter">hasName</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>hasName <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">===</span> <span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setName</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="variables--no-chain-assignment"></a><a name="13.5"></a></p><ul><li><p><a href="#variables--no-chain-assignment">13.5</a> Don’t chain variable assignments. eslint: <a href="https://eslint.org/docs/rules/no-multi-assign" target="_blank" rel="noopener noreferrer"><code>no-multi-assign</code></a></p><blockquote><p>Why? Chaining variable assignments creates implicit global variables.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// JavaScript interprets this as</span>\n  <span class="token comment">// let a = ( b = ( c = 1 ) );</span>\n  <span class="token comment">// The let keyword only applies to variable a; variables b and c become</span>\n  <span class="token comment">// global variables.</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> b <span class="token operator">=</span> c <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 1</span>\n\n<span class="token comment">// good</span>\n<span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n  <span class="token keyword">let</span> b <span class="token operator">=</span> a<span class="token punctuation">;</span>\n  <span class="token keyword">let</span> c <span class="token operator">=</span> a<span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws ReferenceError</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// throws ReferenceError</span>\n\n<span class="token comment">// the same applies for `const`</span>\n</code></pre></div></li></ul><p><a name="variables--unary-increment-decrement"></a><a name="13.6"></a></p><ul><li><p><a href="#variables--unary-increment-decrement">13.6</a> Avoid using unary increments and decrements (<code>++</code>, <code>--</code>). eslint <a href="https://eslint.org/docs/rules/no-plusplus" target="_blank" rel="noopener noreferrer"><code>no-plusplus</code></a></p><blockquote><p>Why? Per the eslint documentation, unary increment and decrement statements are subject to automatic semicolon insertion and can cause silent errors with incrementing or decrementing values within an application. It is also more expressive to mutate your values with statements like <code>num += 1</code> instead of <code>num++</code> or <code>num ++</code>. Disallowing unary increment and decrement statements also prevents you from pre-incrementing/pre-decrementing values unintentionally which can also cause unexpected behavior in your programs.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n\n<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nnum<span class="token operator">++</span><span class="token punctuation">;</span>\n<span class="token operator">--</span>num<span class="token punctuation">;</span>\n\n<span class="token keyword">let</span> sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> truthyCount <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n<span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> array<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> value <span class="token operator">=</span> array<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  sum <span class="token operator">+=</span> value<span class="token punctuation">;</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    truthyCount<span class="token operator">++</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n\n<span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">let</span> num <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nnum <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>\nnum <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> sum <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> a <span class="token operator">+</span> b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> truthyCount <span class="token operator">=</span> array<span class="token punctuation">.</span><span class="token function">filter</span><span class="token punctuation">(</span>Boolean<span class="token punctuation">)</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="variables--linebreak"></a></p><ul><li><p><a href="#variables--linebreak">13.7</a> Avoid linebreaks before or after <code>=</code> in an assignment. If your assignment violates <a href="https://eslint.org/docs/rules/max-len.html" target="_blank" rel="noopener noreferrer"><code>max-len</code></a>, surround the value in parens. eslint <a href="https://eslint.org/docs/rules/operator-linebreak.html" target="_blank" rel="noopener noreferrer"><code>operator-linebreak</code></a>.</p><blockquote><p>Why? Linebreaks surrounding <code>=</code> can obfuscate the value of an assignment.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span>\n  <span class="token function">superLongLongLongLongLongLongLongLongFunctionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo\n  <span class="token operator">=</span> <span class="token string">&#39;superLongLongLongLongLongLongLongLongString&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>\n  <span class="token function">superLongLongLongLongLongLongLongLongFunctionName</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token string">&#39;superLongLongLongLongLongLongLongLongString&#39;</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="variables--no-unused-vars"></a></p><ul><li><p><a href="#variables--no-unused-vars">13.8</a> Disallow unused variables. eslint: <a href="https://eslint.org/docs/rules/no-unused-vars" target="_blank" rel="noopener noreferrer"><code>no-unused-vars</code></a></p><blockquote><p>Why? Variables that are declared and not used anywhere in the code are most likely an error due to incomplete refactoring. Such variables take up space in the code and can lead to confusion by readers.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n\n<span class="token keyword">var</span> some_unused_var <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Write-only variables are not considered as used.</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>\ny <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token comment">// A read for a modification of itself is not considered as used.</span>\n<span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\nz <span class="token operator">=</span> z <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n<span class="token comment">// Unused function arguments.</span>\n<span class="token keyword">function</span> <span class="token function">getX</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n\n<span class="token keyword">function</span> <span class="token function">getXPlusY</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token function">alert</span><span class="token punctuation">(</span><span class="token function">getXPlusY</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// &#39;type&#39; is ignored even if unused because it has a rest property sibling.</span>\n<span class="token comment">// This is a form of extracting an object that omits the specified keys.</span>\n<span class="token keyword">var</span> <span class="token punctuation">{</span> type<span class="token punctuation">,</span> <span class="token operator">...</span>coords <span class="token punctuation">}</span> <span class="token operator">=</span> data<span class="token punctuation">;</span>\n<span class="token comment">// &#39;coords&#39; is now the &#39;data&#39; object without its &#39;type&#39; property.</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="hoisting" tabindex="-1">Hoisting <a class="header-anchor" href="#hoisting" aria-hidden="true">#</a></h2><p><a name="hoisting--about"></a><a name="14.1"></a></p><ul><li><p><a href="#hoisting--about">14.1</a> <code>var</code> declarations get hoisted to the top of their closest enclosing function scope, their assignment does not. <code>const</code> and <code>let</code> declarations are blessed with a new concept called <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/let#Temporal_dead_zone" target="_blank" rel="noopener noreferrer">Temporal Dead Zones (TDZ)</a>. It’s important to know why <a href="https://web.archive.org/web/20200121061528/http://es-discourse.com/t/why-typeof-is-no-longer-safe/15" target="_blank" rel="noopener noreferrer">typeof is no longer safe</a>.</p><div class="language-javascript"><pre><code><span class="token comment">// we know this wouldn’t work (assuming there</span>\n<span class="token comment">// is no notDefined global variable)</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>notDefined<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; throws a ReferenceError</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// creating a variable declaration after you</span>\n<span class="token comment">// reference the variable will work due to</span>\n<span class="token comment">// variable hoisting. Note: the assignment</span>\n<span class="token comment">// value of `true` is not hoisted.</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n  <span class="token keyword">var</span> declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// the interpreter is hoisting the variable</span>\n<span class="token comment">// declaration to the top of the scope,</span>\n<span class="token comment">// which means our example could be rewritten as:</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">let</span> declaredButNotAssigned<span class="token punctuation">;</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n  declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// using const and let</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; throws a ReferenceError</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> declaredButNotAssigned<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; throws a ReferenceError</span>\n  <span class="token keyword">const</span> declaredButNotAssigned <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="hoisting--anon-expressions"></a><a name="14.2"></a></p><ul><li><p><a href="#hoisting--anon-expressions">14.2</a> Anonymous function expressions hoist their variable name, but not the function assignment.</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anonymous<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">anonymous</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; TypeError anonymous is not a function</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">anonymous</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;anonymous function expression&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="hoisting--named-expresions"></a><a name="hoisting--named-expressions"></a><a name="14.3"></a></p><ul><li><p><a href="#hoisting--named-expressions">14.3</a> Named function expressions hoist the variable name, not the function name or the function body.</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>named<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; TypeError named is not a function</span>\n\n  <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; ReferenceError superPower is not defined</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">named</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Flying&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// the same is true when the function name</span>\n<span class="token comment">// is the same as the variable name.</span>\n<span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>named<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; undefined</span>\n\n  <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; TypeError named is not a function</span>\n\n  <span class="token keyword">var</span> <span class="token function-variable function">named</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">named</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;named&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="hoisting--declarations"></a><a name="14.4"></a></p><ul><li><p><a href="#hoisting--declarations">14.4</a> Function declarations hoist their name and the function body.</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">example</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; Flying</span>\n\n  <span class="token keyword">function</span> <span class="token function">superPower</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Flying&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li><li><p>For more information refer to <a href="http://www.adequatelygood.com/2010/2/JavaScript-Scoping-and-Hoisting/" target="_blank" rel="noopener noreferrer">JavaScript Scoping &amp; Hoisting</a> by <a href="http://www.adequatelygood.com/" target="_blank" rel="noopener noreferrer">Ben Cherry</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="comparison-operators-equality" tabindex="-1">Comparison Operators &amp; Equality <a class="header-anchor" href="#comparison-operators-equality" aria-hidden="true">#</a></h2><p><a name="comparison--eqeqeq"></a><a name="15.1"></a></p><ul><li><a href="#comparison--eqeqeq">15.1</a> Use <code>===</code> and <code>!==</code> over <code>==</code> and <code>!=</code>. eslint: <a href="https://eslint.org/docs/rules/eqeqeq.html" target="_blank" rel="noopener noreferrer"><code>eqeqeq</code></a></li></ul><p><a name="comparison--if"></a><a name="15.2"></a></p><ul><li><p><a href="#comparison--if">15.2</a> Conditional statements such as the <code>if</code> statement evaluate their expression using coercion with the <code>ToBoolean</code> abstract method and always follow these simple rules:</p><ul><li><strong>Objects</strong> evaluate to <strong>true</strong></li><li><strong>Undefined</strong> evaluates to <strong>false</strong></li><li><strong>Null</strong> evaluates to <strong>false</strong></li><li><strong>Booleans</strong> evaluate to <strong>the value of the boolean</strong></li><li><strong>Numbers</strong> evaluate to <strong>false</strong> if <strong>+0, -0, or NaN</strong>, otherwise <strong>true</strong></li><li><strong>Strings</strong> evaluate to <strong>false</strong> if an empty string <code>&#39;&#39;</code>, otherwise <strong>true</strong></li></ul><div class="language-javascript"><pre><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// true</span>\n  <span class="token comment">// an array (even an empty one) is an object, objects will evaluate to true</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="comparison--shortcuts"></a><a name="15.3"></a></p><ul><li><p><a href="#comparison--shortcuts">15.3</a> Use shortcuts for booleans, but explicit comparisons for strings and numbers.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isValid <span class="token operator">===</span> <span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isValid<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>name <span class="token operator">!==</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>collection<span class="token punctuation">.</span>length <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="comparison--moreinfo"></a><a name="15.4"></a></p><ul><li><a href="#comparison--moreinfo">15.4</a> For more information see <a href="https://javascriptweblog.wordpress.com/2011/02/07/truth-equality-and-javascript/#more-2108" target="_blank" rel="noopener noreferrer">Truth Equality and JavaScript</a> by Angus Croll.</li></ul><p><a name="comparison--switch-blocks"></a><a name="15.5"></a></p><ul><li><p><a href="#comparison--switch-blocks">15.5</a> Use braces to create blocks in <code>case</code> and <code>default</code> clauses that contain lexical declarations (e.g. <code>let</code>, <code>const</code>, <code>function</code>, and <code>class</code>). eslint: <a href="https://eslint.org/docs/rules/no-case-declarations.html" target="_blank" rel="noopener noreferrer"><code>no-case-declarations</code></a></p><blockquote><p>Why? Lexical declarations are visible in the entire <code>switch</code> block but only get initialized when assigned, which only happens when its <code>case</code> is reached. This causes problems when multiple <code>case</code> clauses attempt to define the same thing.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>\n    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>\n    <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span>\n    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span>\n    <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">switch</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">case</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token comment">// ...</span>\n    <span class="token punctuation">}</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n  <span class="token keyword">case</span> <span class="token number">4</span><span class="token operator">:</span>\n    <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">break</span><span class="token punctuation">;</span>\n  <span class="token keyword">default</span><span class="token operator">:</span> <span class="token punctuation">{</span>\n    <span class="token keyword">class</span> <span class="token class-name">C</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="comparison--nested-ternaries"></a><a name="15.6"></a></p><ul><li><p><a href="#comparison--nested-ternaries">15.6</a> Ternaries should not be nested and generally be single line expressions. eslint: <a href="https://eslint.org/docs/rules/no-nested-ternary.html" target="_blank" rel="noopener noreferrer"><code>no-nested-ternary</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> maybe1 <span class="token operator">&gt;</span> maybe2\n  <span class="token operator">?</span> <span class="token string">&quot;bar&quot;</span>\n  <span class="token operator">:</span> value1 <span class="token operator">&gt;</span> value2 <span class="token operator">?</span> <span class="token string">&quot;baz&quot;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// split into 2 separated ternary expressions</span>\n<span class="token keyword">const</span> maybeNull <span class="token operator">=</span> value1 <span class="token operator">&gt;</span> value2 <span class="token operator">?</span> <span class="token string">&#39;baz&#39;</span> <span class="token operator">:</span> <span class="token keyword">null</span><span class="token punctuation">;</span>\n\n<span class="token comment">// better</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> maybe1 <span class="token operator">&gt;</span> maybe2\n  <span class="token operator">?</span> <span class="token string">&#39;bar&#39;</span>\n  <span class="token operator">:</span> maybeNull<span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> maybe1 <span class="token operator">&gt;</span> maybe2 <span class="token operator">?</span> <span class="token string">&#39;bar&#39;</span> <span class="token operator">:</span> maybeNull<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="comparison--unneeded-ternary"></a><a name="15.7"></a></p><ul><li><p><a href="#comparison--unneeded-ternary">15.7</a> Avoid unneeded ternary statements. eslint: <a href="https://eslint.org/docs/rules/no-unneeded-ternary.html" target="_blank" rel="noopener noreferrer"><code>no-unneeded-ternary</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> a <span class="token operator">?</span> a <span class="token operator">:</span> b<span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> c <span class="token operator">?</span> <span class="token boolean">true</span> <span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> c <span class="token operator">?</span> <span class="token boolean">false</span> <span class="token operator">:</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> a <span class="token operator">||</span> b<span class="token punctuation">;</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>c<span class="token punctuation">;</span>\n<span class="token keyword">const</span> baz <span class="token operator">=</span> <span class="token operator">!</span>c<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="comparison--no-mixed-operators"></a></p><ul><li><p><a href="#comparison--no-mixed-operators">15.8</a> When mixing operators, enclose them in parentheses. The only exception is the standard arithmetic operators: <code>+</code>, <code>-</code>, and <code>**</code> since their precedence is broadly understood. We recommend enclosing <code>/</code> and <code>*</code> in parentheses because their precedence can be ambiguous when they are mixed. eslint: <a href="https://eslint.org/docs/rules/no-mixed-operators.html" target="_blank" rel="noopener noreferrer"><code>no-mixed-operators</code></a></p><blockquote><p>Why? This improves readability and clarifies the developer’s intention.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> d <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> a <span class="token operator">**</span> b <span class="token operator">-</span> <span class="token number">5</span> <span class="token operator">%</span> d<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token comment">// one may be confused into thinking (a || b) &amp;&amp; c</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> b <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> d<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> a <span class="token operator">+</span> b <span class="token operator">/</span> c <span class="token operator">*</span> d<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&amp;&amp;</span> b <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> c <span class="token operator">&gt;</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token punctuation">(</span>d <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">===</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> a <span class="token operator">**</span> b <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">%</span> d<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">||</span> <span class="token punctuation">(</span>b <span class="token operator">&amp;&amp;</span> c<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> d<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> bar <span class="token operator">=</span> a <span class="token operator">+</span> <span class="token punctuation">(</span>b <span class="token operator">/</span> c<span class="token punctuation">)</span> <span class="token operator">*</span> d<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="blocks" tabindex="-1">Blocks <a class="header-anchor" href="#blocks" aria-hidden="true">#</a></h2><p><a name="blocks--braces"></a><a name="16.1"></a></p><ul><li><p><a href="#blocks--braces">16.1</a> Use braces with all multiline blocks. eslint: <a href="https://eslint.org/docs/rules/nonblock-statement-body-position" target="_blank" rel="noopener noreferrer"><code>nonblock-statement-body-position</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="blocks--cuddled-elses"></a><a name="16.2"></a></p><ul><li><p><a href="#blocks--cuddled-elses">16.2</a> If you’re using multiline blocks with <code>if</code> and <code>else</code>, put <code>else</code> on the same line as your <code>if</code> block’s closing brace. eslint: <a href="https://eslint.org/docs/rules/brace-style.html" target="_blank" rel="noopener noreferrer"><code>brace-style</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">thing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token function">thing3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>test<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token function">thing2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  <span class="token function">thing3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="blocks--no-else-return"></a><a name="16.3"></a></p><ul><li><p><a href="#blocks--no-else-return">16.3</a> If an <code>if</code> block always executes a <code>return</code> statement, the subsequent <code>else</code> block is unnecessary. A <code>return</code> in an <code>else if</code> block following an <code>if</code> block that contains a <code>return</code> can be separated into multiple <code>if</code> blocks. eslint: <a href="https://eslint.org/docs/rules/no-else-return" target="_blank" rel="noopener noreferrer"><code>no-else-return</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">cats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">dogs</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">cats</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> x<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">dogs</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">if</span> <span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">if</span> <span class="token punctuation">(</span>z<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n      <span class="token keyword">return</span> y<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> z<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="control-statements" tabindex="-1">Control Statements <a class="header-anchor" href="#control-statements" aria-hidden="true">#</a></h2><p><a name="control-statements"></a></p><ul><li><p><a href="#control-statements">17.1</a> In case your control statement (<code>if</code>, <code>while</code> etc.) gets too long or exceeds the maximum line length, each (grouped) condition could be put into a new line. The logical operator should begin the line.</p><blockquote><p>Why? Requiring operators at the beginning of the line keeps the operators aligned and follows a pattern similar to method chaining. This also improves readability by making it easier to visually follow complex logic.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">||</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">doesItLookGoodWhenItBecomesThatLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token function">isThisReallyHappening</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span>\n  bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span>\n  <span class="token operator">&amp;&amp;</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span>\n  bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  foo <span class="token operator">===</span> <span class="token number">123</span>\n  <span class="token operator">&amp;&amp;</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>\n  <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">||</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span>\n  <span class="token operator">&amp;&amp;</span> <span class="token function">doesItLookGoodWhenItBecomesThatLong</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token operator">&amp;&amp;</span> <span class="token function">isThisReallyHappening</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo <span class="token operator">===</span> <span class="token number">123</span> <span class="token operator">&amp;&amp;</span> bar <span class="token operator">===</span> <span class="token string">&#39;abc&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">thing1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="control-statement--value-selection"></a><a name="control-statements--value-selection"></a></p><ul><li><p><a href="#control-statements--value-selection">17.2</a> Don&#39;t use selection operators in place of control statements.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token operator">!</span>isRunning <span class="token operator">&amp;&amp;</span> <span class="token function">startRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>isRunning<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">startRunning</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="comments" tabindex="-1">Comments <a class="header-anchor" href="#comments" aria-hidden="true">#</a></h2><p><a name="comments--multiline"></a><a name="17.1"></a></p><ul><li><p><a href="#comments--multiline">18.1</a> Use <code>/** ... */</code> for multiline comments.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token comment">// make() returns a new element</span>\n<span class="token comment">// based on the passed in tag name</span>\n<span class="token comment">//</span>\n<span class="token comment">// @param {String} tag</span>\n<span class="token comment">// @return {Element} element</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">/**\n * make() returns a new element\n * based on the passed-in tag name\n */</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="comments--singleline"></a><a name="17.2"></a></p><ul><li><p><a href="#comments--singleline">18.2</a> Use <code>//</code> for single line comments. Place single line comments on a newline above the subject of the comment. Put an empty line before the comment unless it’s on the first line of a block.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment">// is current tab</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// is current tab</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetching type...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token comment">// set the default type to &#39;no type&#39;</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;no type&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;fetching type...&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// set the default type to &#39;no type&#39;</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;no type&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// also good</span>\n<span class="token keyword">function</span> <span class="token function">getType</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// set the default type to &#39;no type&#39;</span>\n  <span class="token keyword">const</span> type <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>type <span class="token operator">||</span> <span class="token string">&#39;no type&#39;</span><span class="token punctuation">;</span>\n\n  <span class="token keyword">return</span> type<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="comments--spaces"></a></p><ul><li><p><a href="#comments--spaces">18.3</a> Start all comments with a space to make it easier to read. eslint: <a href="https://eslint.org/docs/rules/spaced-comment" target="_blank" rel="noopener noreferrer"><code>spaced-comment</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token comment">//is current tab</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">// is current tab</span>\n<span class="token keyword">const</span> active <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token comment">/**\n *make() returns a new element\n *based on the passed-in tag name\n */</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token comment">/**\n * make() returns a new element\n * based on the passed-in tag name\n */</span>\n<span class="token keyword">function</span> <span class="token function">make</span><span class="token punctuation">(</span><span class="token parameter">tag</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token keyword">return</span> element<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="comments--actionitems"></a><a name="17.3"></a></p><ul><li><a href="#comments--actionitems">18.4</a> Prefixing your comments with <code>FIXME</code> or <code>TODO</code> helps other developers quickly understand if you’re pointing out a problem that needs to be revisited, or if you’re suggesting a solution to the problem that needs to be implemented. These are different than regular comments because they are actionable. The actions are <code>FIXME: -- need to figure this out</code> or <code>TODO: -- need to implement</code>.</li></ul><p><a name="comments--fixme"></a><a name="17.4"></a></p><ul><li><p><a href="#comments--fixme">18.5</a> Use <code>// FIXME:</code> to annotate problems.</p><div class="language-javascript"><pre><code><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">Abacus</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// FIXME: shouldn’t use a global here</span>\n    total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="comments--todo"></a><a name="17.5"></a></p><ul><li><p><a href="#comments--todo">18.6</a> Use <code>// TODO:</code> to annotate solutions to problems.</p><div class="language-javascript"><pre><code><span class="token keyword">class</span> <span class="token class-name">Calculator</span> <span class="token keyword">extends</span> <span class="token class-name">Abacus</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">super</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n    <span class="token comment">// TODO: total should be configurable by an options param</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>total <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="whitespace" tabindex="-1">Whitespace <a class="header-anchor" href="#whitespace" aria-hidden="true">#</a></h2><p><a name="whitespace--spaces"></a><a name="18.1"></a></p><ul><li><p><a href="#whitespace--spaces">19.1</a> Use soft tabs (space character) set to 2 spaces. eslint: <a href="https://eslint.org/docs/rules/indent.html" target="_blank" rel="noopener noreferrer"><code>indent</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n∙∙∙∙<span class="token keyword">let</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n∙<span class="token keyword">let</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n∙∙<span class="token keyword">let</span> name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="whitespace--before-blocks"></a><a name="18.2"></a></p><ul><li><p><a href="#whitespace--before-blocks">19.2</a> Place 1 space before the leading brace. eslint: <a href="https://eslint.org/docs/rules/space-before-blocks.html" target="_blank" rel="noopener noreferrer"><code>space-before-blocks</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;test&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\ndog<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;attr&#39;</span><span class="token punctuation">,</span><span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;1 year&#39;</span><span class="token punctuation">,</span>\n  breed<span class="token operator">:</span> <span class="token string">&#39;Bernese Mountain Dog&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\ndog<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;attr&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>\n  age<span class="token operator">:</span> <span class="token string">&#39;1 year&#39;</span><span class="token punctuation">,</span>\n  breed<span class="token operator">:</span> <span class="token string">&#39;Bernese Mountain Dog&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--around-keywords"></a><a name="18.3"></a></p><ul><li><p><a href="#whitespace--around-keywords">19.3</a> Place 1 space before the opening parenthesis in control statements (<code>if</code>, <code>while</code> etc.). Place no space between the argument list and the function name in function calls and declarations. eslint: <a href="https://eslint.org/docs/rules/keyword-spacing.html" target="_blank" rel="noopener noreferrer"><code>keyword-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span><span class="token punctuation">(</span>isJedi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fight</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>isJedi<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">fight</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span> <span class="token punctuation">(</span><span class="token string">&#39;Swooosh!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">fight</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Swooosh!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="whitespace--infix-ops"></a><a name="18.4"></a></p><ul><li><p><a href="#whitespace--infix-ops">19.4</a> Set off operators with spaces. eslint: <a href="https://eslint.org/docs/rules/space-infix-ops.html" target="_blank" rel="noopener noreferrer"><code>space-infix-ops</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> x<span class="token operator">=</span>y<span class="token operator">+</span><span class="token number">5</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> x <span class="token operator">=</span> y <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--newline-at-end"></a><a name="18.5"></a></p><ul><li><p><a href="#whitespace--newline-at-end">19.5</a> End files with a single newline character. eslint: <a href="https://github.com/eslint/eslint/blob/master/docs/rules/eol-last.md" target="_blank" rel="noopener noreferrer"><code>eol-last</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>\n</code></pre></div><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>↵\n↵\n</code></pre></div><div class="language-javascript"><pre><code><span class="token comment">// good</span>\n<span class="token keyword">import</span> <span class="token punctuation">{</span> es6 <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;./AirbnbStyleGuide&#39;</span><span class="token punctuation">;</span>\n  <span class="token comment">// ...</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> es6<span class="token punctuation">;</span>↵\n</code></pre></div></li></ul><p><a name="whitespace--chains"></a><a name="18.6"></a></p><ul><li><p><a href="#whitespace--chains">19.6</a> Use indentation when making long method chains (more than 2 method chains). Use a leading dot, which emphasizes that the line is a method call, not a new statement. eslint: <a href="https://eslint.org/docs/rules/newline-per-chained-call" target="_blank" rel="noopener noreferrer"><code>newline-per-chained-call</code></a> <a href="https://eslint.org/docs/rules/no-whitespace-before-property" target="_blank" rel="noopener noreferrer"><code>no-whitespace-before-property</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#items&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.selected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#items&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n  <span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.selected&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n    <span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n    <span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n  <span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.open&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>\n    <span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;#items&#39;</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.selected&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">highlight</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;.open&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">updateCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> leds <span class="token operator">=</span> stage<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&#39;.led&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">classed</span><span class="token punctuation">(</span><span class="token string">&#39;led&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>radius <span class="token operator">+</span> margin<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:g&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tron<span class="token punctuation">.</span>led<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> leds <span class="token operator">=</span> stage<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&#39;.led&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:svg&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">classed</span><span class="token punctuation">(</span><span class="token string">&#39;led&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>radius <span class="token operator">+</span> margin<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:g&#39;</span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span>\n    <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tron<span class="token punctuation">.</span>led<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> leds <span class="token operator">=</span> stage<span class="token punctuation">.</span><span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token string">&#39;.led&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> svg <span class="token operator">=</span> leds<span class="token punctuation">.</span><span class="token function">enter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:svg&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nsvg<span class="token punctuation">.</span><span class="token function">classed</span><span class="token punctuation">(</span><span class="token string">&#39;led&#39;</span><span class="token punctuation">,</span> <span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;width&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>radius <span class="token operator">+</span> margin<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> g <span class="token operator">=</span> svg<span class="token punctuation">.</span><span class="token function">append</span><span class="token punctuation">(</span><span class="token string">&#39;svg:g&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\ng<span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">&#39;transform&#39;</span><span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">translate(</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">,</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>radius <span class="token operator">+</span> margin<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">)</span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>tron<span class="token punctuation">.</span>led<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--after-blocks"></a><a name="18.7"></a></p><ul><li><p><a href="#whitespace--after-blocks">19.7</a> Leave a blank line after blocks and before the next statement.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">return</span> baz<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> bar<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">return</span> baz<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> obj<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n<span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n\n  <span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token keyword">return</span> arr<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--padded-blocks"></a><a name="18.8"></a></p><ul><li><p><a href="#whitespace--padded-blocks">19.8</a> Do not pad your blocks with blank lines. eslint: <a href="https://eslint.org/docs/rules/padded-blocks.html" target="_blank" rel="noopener noreferrer"><code>padded-blocks</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>baz<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">{</span>\n\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">bar</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>bar <span class="token operator">=</span> bar<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>baz<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>qux<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="whitespace--no-multiple-blanks"></a></p><ul><li><p><a href="#whitespace--no-multiple-blanks">19.9</a> Do not use multiple blank lines to pad your code. eslint: <a href="https://eslint.org/docs/rules/no-multiple-empty-lines" target="_blank" rel="noopener noreferrer"><code>no-multiple-empty-lines</code></a></p>\x3c!-- markdownlint-disable MD012 --\x3e<div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fullName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> fullName<span class="token punctuation">;</span>\n\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>\n\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n\n  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token parameter">birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">getAge</span><span class="token punctuation">(</span>today<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n\n  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token parameter">today<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ..</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Person</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">fullName<span class="token punctuation">,</span> email<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>fullName <span class="token operator">=</span> fullName<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>email <span class="token operator">=</span> email<span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span>birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token parameter">birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> today <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token function">getAge</span><span class="token punctuation">(</span>today<span class="token punctuation">,</span> birthday<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token parameter">today<span class="token punctuation">,</span> birthday</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ..</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="whitespace--in-parens"></a><a name="18.9"></a></p><ul><li><p><a href="#whitespace--in-parens">19.10</a> Do not add spaces inside parentheses. eslint: <a href="https://eslint.org/docs/rules/space-in-parens.html" target="_blank" rel="noopener noreferrer"><code>space-in-parens</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span> <span class="token parameter">foo</span> <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">bar</span><span class="token punctuation">(</span><span class="token parameter">foo</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> foo<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span> foo <span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="whitespace--in-brackets"></a><a name="18.10"></a></p><ul><li><p><a href="#whitespace--in-brackets">19.11</a> Do not add spaces inside brackets. eslint: <a href="https://eslint.org/docs/rules/array-bracket-spacing.html" target="_blank" rel="noopener noreferrer"><code>array-bracket-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span> <span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\nconsole<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--in-braces"></a><a name="18.11"></a></p><ul><li><p><a href="#whitespace--in-braces">19.12</a> Add spaces inside curly braces. eslint: <a href="https://eslint.org/docs/rules/object-curly-spacing.html" target="_blank" rel="noopener noreferrer"><code>object-curly-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span>clark<span class="token operator">:</span> <span class="token string">&#39;kent&#39;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">{</span> clark<span class="token operator">:</span> <span class="token string">&#39;kent&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--max-len"></a><a name="18.12"></a></p><ul><li><p><a href="#whitespace--max-len">19.13</a> Avoid having lines of code that are longer than 100 characters (including whitespace). Note: per <a href="#strings--line-length">above</a>, long strings are exempt from this rule, and should not be broken up. eslint: <a href="https://eslint.org/docs/rules/max-len.html" target="_blank" rel="noopener noreferrer"><code>max-len</code></a></p><blockquote><p>Why? This ensures readability and maintainability.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> jsonData <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux<span class="token punctuation">.</span>xyzzy<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span> method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span> url<span class="token operator">:</span> <span class="token string">&#39;https://airbnb.com/&#39;</span><span class="token punctuation">,</span> data<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Congratulations!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You have failed this city.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> foo <span class="token operator">=</span> jsonData\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux\n  <span class="token operator">&amp;&amp;</span> jsonData<span class="token punctuation">.</span>foo<span class="token punctuation">.</span>bar<span class="token punctuation">.</span>baz<span class="token punctuation">.</span>quux<span class="token punctuation">.</span>xyzzy<span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n$<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  method<span class="token operator">:</span> <span class="token string">&#39;POST&#39;</span><span class="token punctuation">,</span>\n  url<span class="token operator">:</span> <span class="token string">&#39;https://airbnb.com/&#39;</span><span class="token punctuation">,</span>\n  data<span class="token operator">:</span> <span class="token punctuation">{</span> name<span class="token operator">:</span> <span class="token string">&#39;John&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">done</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;Congratulations!&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n  <span class="token punctuation">.</span><span class="token function">fail</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">&#39;You have failed this city.&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--block-spacing"></a></p><ul><li><p><a href="#whitespace--block-spacing">19.14</a> Require consistent spacing inside an open block token and the next token on the same line. This rule also enforces consistent spacing inside a close block token and previous token on the same line. eslint: <a href="https://eslint.org/docs/rules/block-spacing" target="_blank" rel="noopener noreferrer"><code>block-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span> bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span>foo<span class="token punctuation">)</span> <span class="token punctuation">{</span> bar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="whitespace--comma-spacing"></a></p><ul><li><p><a href="#whitespace--comma-spacing">19.15</a> Avoid spaces before commas and require a space after commas. eslint: <a href="https://eslint.org/docs/rules/comma-spacing" target="_blank" rel="noopener noreferrer"><code>comma-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span>bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span> <span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">var</span> foo <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> bar <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--computed-property-spacing"></a></p><ul><li><p><a href="#whitespace--computed-property-spacing">19.16</a> Enforce spacing inside of computed property brackets. eslint: <a href="https://eslint.org/docs/rules/computed-property-spacing" target="_blank" rel="noopener noreferrer"><code>computed-property-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\nobj<span class="token punctuation">[</span>foo <span class="token punctuation">]</span>\nobj<span class="token punctuation">[</span> <span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">[</span> b <span class="token punctuation">]</span><span class="token operator">:</span> a<span class="token punctuation">}</span>\nobj<span class="token punctuation">[</span>foo<span class="token punctuation">[</span> bar <span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n<span class="token comment">// good</span>\nobj<span class="token punctuation">[</span>foo<span class="token punctuation">]</span>\nobj<span class="token punctuation">[</span><span class="token string">&#39;foo&#39;</span><span class="token punctuation">]</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token punctuation">{</span> <span class="token punctuation">[</span>b<span class="token punctuation">]</span><span class="token operator">:</span> a <span class="token punctuation">}</span>\nobj<span class="token punctuation">[</span>foo<span class="token punctuation">[</span>bar<span class="token punctuation">]</span><span class="token punctuation">]</span>\n</code></pre></div></li></ul><p><a name="whitespace--func-call-spacing"></a></p><ul><li><p><a href="#whitespace--func-call-spacing">19.17</a> Avoid spaces between functions and their invocations. eslint: <a href="https://eslint.org/docs/rules/func-call-spacing" target="_blank" rel="noopener noreferrer"><code>func-call-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token function">func</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token function">func</span>\n<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">func</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--key-spacing"></a></p><ul><li><p><a href="#whitespace--key-spacing">19.18</a> Enforce spacing between keys and values in object literal properties. eslint: <a href="https://eslint.org/docs/rules/key-spacing" target="_blank" rel="noopener noreferrer"><code>key-spacing</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo <span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> obj2 <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span><span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span> foo<span class="token operator">:</span> <span class="token number">42</span> <span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="whitespace--no-trailing-spaces"></a></p><ul><li><a href="#whitespace--no-trailing-spaces">19.19</a> Avoid trailing spaces at the end of lines. eslint: <a href="https://eslint.org/docs/rules/no-trailing-spaces" target="_blank" rel="noopener noreferrer"><code>no-trailing-spaces</code></a></li></ul><p><a name="whitespace--no-multiple-empty-lines"></a></p><ul><li><p><a href="#whitespace--no-multiple-empty-lines">19.20</a> Avoid multiple empty lines, only allow one newline at the end of files, and avoid a newline at the beginning of files. eslint: <a href="https://eslint.org/docs/rules/no-multiple-empty-lines" target="_blank" rel="noopener noreferrer"><code>no-multiple-empty-lines</code></a></p>\x3c!-- markdownlint-disable MD012 --\x3e<div class="language-javascript"><pre><code><span class="token comment">// bad - multiple empty lines</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n\n\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad - 2+ newlines at end of file</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n\n<span class="token comment">// bad - 1+ newline(s) at beginning of file</span>\n\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>\n<span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>\n\n</code></pre></div>\x3c!-- markdownlint-enable MD012 --\x3e</li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="commas" tabindex="-1">Commas <a class="header-anchor" href="#commas" aria-hidden="true">#</a></h2><p><a name="commas--leading-trailing"></a><a name="19.1"></a></p><ul><li><p><a href="#commas--leading-trailing">20.1</a> Leading commas: <strong>Nope.</strong> eslint: <a href="https://eslint.org/docs/rules/comma-style.html" target="_blank" rel="noopener noreferrer"><code>comma-style</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> story <span class="token operator">=</span> <span class="token punctuation">[</span>\n    once\n  <span class="token punctuation">,</span> upon\n  <span class="token punctuation">,</span> aTime\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> story <span class="token operator">=</span> <span class="token punctuation">[</span>\n  once<span class="token punctuation">,</span>\n  upon<span class="token punctuation">,</span>\n  aTime<span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n    firstName<span class="token operator">:</span> <span class="token string">&#39;Ada&#39;</span>\n  <span class="token punctuation">,</span> lastName<span class="token operator">:</span> <span class="token string">&#39;Lovelace&#39;</span>\n  <span class="token punctuation">,</span> birthYear<span class="token operator">:</span> <span class="token number">1815</span>\n  <span class="token punctuation">,</span> superPower<span class="token operator">:</span> <span class="token string">&#39;computers&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&#39;Ada&#39;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&#39;Lovelace&#39;</span><span class="token punctuation">,</span>\n  birthYear<span class="token operator">:</span> <span class="token number">1815</span><span class="token punctuation">,</span>\n  superPower<span class="token operator">:</span> <span class="token string">&#39;computers&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="commas--dangling"></a><a name="19.2"></a></p><ul><li><p><a href="#commas--dangling">20.2</a> Additional trailing comma: <strong>Yup.</strong> eslint: <a href="https://eslint.org/docs/rules/comma-dangle.html" target="_blank" rel="noopener noreferrer"><code>comma-dangle</code></a></p><blockquote><p>Why? This leads to cleaner git diffs. Also, transpilers like Babel will remove the additional trailing comma in the transpiled code which means you don’t have to worry about the <a href="https://github.com/airbnb/javascript/blob/es5-deprecated/es5/README.md#commas" target="_blank" rel="noopener noreferrer">trailing comma problem</a> in legacy browsers.</p></blockquote><div class="language-diff"><pre><code>// bad - git diff without trailing comma\nconst hero = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    firstName: &#39;Florence&#39;,\n</span></span><span class="token deleted-sign deleted"><span class="token prefix deleted">-</span><span class="token line">    lastName: &#39;Nightingale&#39;\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    lastName: &#39;Nightingale&#39;,\n</span><span class="token prefix inserted">+</span><span class="token line">    inventorOf: [&#39;coxcomb chart&#39;, &#39;modern nursing&#39;]\n</span></span>};\n\n// good - git diff with trailing comma\nconst hero = {\n<span class="token unchanged"><span class="token prefix unchanged"> </span><span class="token line">    firstName: &#39;Florence&#39;,\n</span><span class="token prefix unchanged"> </span><span class="token line">    lastName: &#39;Nightingale&#39;,\n</span></span><span class="token inserted-sign inserted"><span class="token prefix inserted">+</span><span class="token line">    inventorOf: [&#39;coxcomb chart&#39;, &#39;modern nursing&#39;],\n</span></span>};\n</code></pre></div><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&#39;Dana&#39;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&#39;Scully&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> heroes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;Batman&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Superman&#39;</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> hero <span class="token operator">=</span> <span class="token punctuation">{</span>\n  firstName<span class="token operator">:</span> <span class="token string">&#39;Dana&#39;</span><span class="token punctuation">,</span>\n  lastName<span class="token operator">:</span> <span class="token string">&#39;Scully&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">const</span> heroes <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token string">&#39;Batman&#39;</span><span class="token punctuation">,</span>\n  <span class="token string">&#39;Superman&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">createHero</span><span class="token punctuation">(</span>\n  <span class="token parameter">firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// does nothing</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">createHero</span><span class="token punctuation">(</span>\n  <span class="token parameter">firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span></span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// does nothing</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good (note that a comma must not appear after a &quot;rest&quot; element)</span>\n<span class="token keyword">function</span> <span class="token function">createHero</span><span class="token punctuation">(</span>\n  <span class="token parameter">firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span>\n  <span class="token operator">...</span>heroArgs</span>\n<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// does nothing</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">createHero</span><span class="token punctuation">(</span>\n  firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">createHero</span><span class="token punctuation">(</span>\n  firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span>\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good (note that a comma must not appear after a &quot;rest&quot; element)</span>\n<span class="token function">createHero</span><span class="token punctuation">(</span>\n  firstName<span class="token punctuation">,</span>\n  lastName<span class="token punctuation">,</span>\n  inventorOf<span class="token punctuation">,</span>\n  <span class="token operator">...</span>heroArgs\n<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="semicolons" tabindex="-1">Semicolons <a class="header-anchor" href="#semicolons" aria-hidden="true">#</a></h2><p><a name="semicolons--required"></a><a name="20.1"></a></p><ul><li><p><a href="#semicolons--required">21.1</a> <strong>Yup.</strong> eslint: <a href="https://eslint.org/docs/rules/semi.html" target="_blank" rel="noopener noreferrer"><code>semi</code></a></p><blockquote><p>Why? When JavaScript encounters a line break without a semicolon, it uses a set of rules called <a href="https://tc39.github.io/ecma262/#sec-automatic-semicolon-insertion" target="_blank" rel="noopener noreferrer">Automatic Semicolon Insertion</a> to determine whether it should regard that line break as the end of a statement, and (as the name implies) place a semicolon into your code before the line break if it thinks so. ASI contains a few eccentric behaviors, though, and your code will break if JavaScript misinterprets your line break. These rules will become more complicated as new features become a part of JavaScript. Explicitly terminating your statements and configuring your linter to catch missing semicolons will help prevent you from encountering issues.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad - raises exception</span>\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token keyword">const</span> leia <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n<span class="token punctuation">[</span>luke<span class="token punctuation">,</span> leia<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">jedi</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> jedi<span class="token punctuation">.</span>father <span class="token operator">=</span> <span class="token string">&#39;vader&#39;</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad - raises exception</span>\n<span class="token keyword">const</span> reaction <span class="token operator">=</span> <span class="token string">&quot;No! That’s impossible!&quot;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">meanwhileOnTheFalcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// handle `leia`, `lando`, `chewie`, `r2`, `c3p0`</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n\n<span class="token comment">// bad - returns `undefined` instead of the value on the next line - always happens when `return` is on a line by itself because of ASI!</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span>\n    <span class="token string">&#39;search your feelings, you know it to be foo&#39;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> luke <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> leia <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">[</span>luke<span class="token punctuation">,</span> leia<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">jedi</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  jedi<span class="token punctuation">.</span>father <span class="token operator">=</span> <span class="token string">&#39;vader&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> reaction <span class="token operator">=</span> <span class="token string">&quot;No! That’s impossible!&quot;</span><span class="token punctuation">;</span>\n<span class="token punctuation">(</span><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">meanwhileOnTheFalcon</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// handle `leia`, `lando`, `chewie`, `r2`, `c3p0`</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token string">&#39;search your feelings, you know it to be foo&#39;</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div><p><a href="https://stackoverflow.com/questions/7365172/semicolon-before-self-invoking-function/7365214#7365214" target="_blank" rel="noopener noreferrer">Read more</a>.</p></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="type-casting-coercion" tabindex="-1">Type Casting &amp; Coercion <a class="header-anchor" href="#type-casting-coercion" aria-hidden="true">#</a></h2><p><a name="coercion--explicit"></a><a name="21.1"></a></p><ul><li><a href="#coercion--explicit">22.1</a> Perform type coercion at the beginning of the statement.</li></ul><p><a name="coercion--strings"></a><a name="21.2"></a></p><ul><li><p><a href="#coercion--strings">22.2</a> Strings: eslint: <a href="https://eslint.org/docs/rules/no-new-wrappers" target="_blank" rel="noopener noreferrer"><code>no-new-wrappers</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// =&gt; this.reviewScore = 9;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// typeof totalScore is &quot;object&quot; not &quot;string&quot;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore <span class="token operator">+</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">;</span> <span class="token comment">// invokes this.reviewScore.valueOf()</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// isn’t guaranteed to return a string</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> totalScore <span class="token operator">=</span> <span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reviewScore<span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="coercion--numbers"></a><a name="21.3"></a></p><ul><li><p><a href="#coercion--numbers">22.3</a> Numbers: Use <code>Number</code> for type casting and <code>parseInt</code> always with a radix for parsing strings. eslint: <a href="https://eslint.org/docs/rules/radix" target="_blank" rel="noopener noreferrer"><code>radix</code></a> <a href="https://eslint.org/docs/rules/no-new-wrappers" target="_blank" rel="noopener noreferrer"><code>no-new-wrappers</code></a></p><blockquote><p>Why? The <code>parseInt</code> function produces an integer value dictated by interpretation of the contents of the string argument according to the specified radix. Leading whitespace in string is ignored. If radix is <code>undefined</code> or <code>0</code>, it is assumed to be <code>10</code> except when the number begins with the character pairs <code>0x</code> or <code>0X</code>, in which case a radix of 16 is assumed. This differs from ECMAScript 3, which merely discouraged (but allowed) octal interpretation. Many implementations have not adopted this behavior as of 2013. And, because older browsers must be supported, always specify a radix.</p></blockquote><div class="language-javascript"><pre><code><span class="token keyword">const</span> inputValue <span class="token operator">=</span> <span class="token string">&#39;4&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token operator">+</span>inputValue<span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> inputValue <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">Number</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">parseInt</span><span class="token punctuation">(</span>inputValue<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="coercion--comment-deviations"></a><a name="21.4"></a></p><ul><li><p><a href="#coercion--comment-deviations">22.4</a> If for whatever reason you are doing something wild and <code>parseInt</code> is your bottleneck and need to use Bitshift for <a href="https://jsperf.com/coercion-vs-casting/3" target="_blank" rel="noopener noreferrer">performance reasons</a>, leave a comment explaining why and what you’re doing.</p><div class="language-javascript"><pre><code><span class="token comment">// good</span>\n<span class="token comment">/**\n * parseInt was the reason my code was slow.\n * Bitshifting the String to coerce it to a\n * Number made it a lot faster.\n */</span>\n<span class="token keyword">const</span> val <span class="token operator">=</span> inputValue <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="coercion--bitwise"></a><a name="21.5"></a></p><ul><li><p><a href="#coercion--bitwise">22.5</a> <strong>Note:</strong> Be careful when using bitshift operations. Numbers are represented as <a href="https://es5.github.io/#x4.3.19" target="_blank" rel="noopener noreferrer">64-bit values</a>, but bitshift operations always return a 32-bit integer (<a href="https://es5.github.io/#x11.7" target="_blank" rel="noopener noreferrer">source</a>). Bitshift can lead to unexpected behavior for integer values larger than 32 bits. <a href="https://github.com/airbnb/javascript/issues/109" target="_blank" rel="noopener noreferrer">Discussion</a>. Largest signed 32-bit Int is 2,147,483,647:</p><div class="language-javascript"><pre><code><span class="token number">2147483647</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; 2147483647</span>\n<span class="token number">2147483648</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; -2147483648</span>\n<span class="token number">2147483649</span> <span class="token operator">&gt;&gt;</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// =&gt; -2147483647</span>\n</code></pre></div></li></ul><p><a name="coercion--booleans"></a><a name="21.6"></a></p><ul><li><p><a href="#coercion--booleans">22.6</a> Booleans: eslint: <a href="https://eslint.org/docs/rules/no-new-wrappers" target="_blank" rel="noopener noreferrer"><code>no-new-wrappers</code></a></p><div class="language-javascript"><pre><code><span class="token keyword">const</span> age <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> hasAge <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Boolean</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> hasAge <span class="token operator">=</span> <span class="token function">Boolean</span><span class="token punctuation">(</span>age<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> hasAge <span class="token operator">=</span> <span class="token operator">!</span><span class="token operator">!</span>age<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="naming-conventions" tabindex="-1">Naming Conventions <a class="header-anchor" href="#naming-conventions" aria-hidden="true">#</a></h2><p><a name="naming--descriptive"></a><a name="22.1"></a></p><ul><li><p><a href="#naming--descriptive">23.1</a> Avoid single letter names. Be descriptive with your naming. eslint: <a href="https://eslint.org/docs/rules/id-length" target="_blank" rel="noopener noreferrer"><code>id-length</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">q</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">query</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="naming--camelCase"></a><a name="22.2"></a></p><ul><li><p><a href="#naming--camelCase">23.2</a> Use camelCase when naming objects, functions, and instances. eslint: <a href="https://eslint.org/docs/rules/camelcase.html" target="_blank" rel="noopener noreferrer"><code>camelcase</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> OBJEcttsssss <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">const</span> this_is_my_object <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">c</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> thisIsMyObject <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token keyword">function</span> <span class="token function">thisIsMyFunction</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="naming--PascalCase"></a><a name="22.3"></a></p><ul><li><p><a href="#naming--PascalCase">23.3</a> Use PascalCase only when naming constructors or classes. eslint: <a href="https://eslint.org/docs/rules/new-cap.html" target="_blank" rel="noopener noreferrer"><code>new-cap</code></a></p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">user</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> bad <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">user</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;nope&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> options<span class="token punctuation">.</span>name<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">const</span> good <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n  name<span class="token operator">:</span> <span class="token string">&#39;yup&#39;</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="naming--leading-underscore"></a><a name="22.4"></a></p><ul><li><p><a href="#naming--leading-underscore">23.4</a> Do not use trailing or leading underscores. eslint: <a href="https://eslint.org/docs/rules/no-underscore-dangle.html" target="_blank" rel="noopener noreferrer"><code>no-underscore-dangle</code></a></p><blockquote><p>Why? JavaScript does not have the concept of privacy in terms of properties or methods. Although a leading underscore is a common convention to mean “private”, in fact, these properties are fully public, and as such, are part of your public API contract. This convention might lead developers to wrongly think that a change won’t count as breaking, or that tests aren’t needed. tl;dr: if you want something to be “private”, it must not be observably present.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>__firstName__ <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>firstName_ <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>_firstName <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">this</span><span class="token punctuation">.</span>firstName <span class="token operator">=</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good, in environments where WeakMaps are available</span>\n<span class="token comment">// see https://kangax.github.io/compat-table/es6/#test-WeakMap</span>\n<span class="token keyword">const</span> firstNames <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WeakMap</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\nfirstNames<span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">,</span> <span class="token string">&#39;Panda&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="naming--self-this"></a><a name="22.5"></a></p><ul><li><p><a href="#naming--self-this">23.5</a> Don’t save references to <code>this</code>. Use arrow functions or <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/bind" target="_blank" rel="noopener noreferrer">Function#bind</a>.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> self <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> that <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>\n  <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>that<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="naming--filename-matches-export"></a><a name="22.6"></a></p><ul><li><p><a href="#naming--filename-matches-export">23.6</a> A base filename should exactly match the name of its default export.</p><div class="language-javascript"><pre><code><span class="token comment">// file 1 contents</span>\n<span class="token keyword">class</span> <span class="token class-name">CheckBox</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> CheckBox<span class="token punctuation">;</span>\n\n<span class="token comment">// file 2 contents</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">fortyTwo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token punctuation">}</span>\n\n<span class="token comment">// file 3 contents</span>\n<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">insideDirectory</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\n\n<span class="token comment">// in some other file</span>\n<span class="token comment">// bad</span>\n<span class="token keyword">import</span> CheckBox <span class="token keyword">from</span> <span class="token string">&#39;./checkBox&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/export, camelCase filename</span>\n<span class="token keyword">import</span> FortyTwo <span class="token keyword">from</span> <span class="token string">&#39;./FortyTwo&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/filename, camelCase export</span>\n<span class="token keyword">import</span> InsideDirectory <span class="token keyword">from</span> <span class="token string">&#39;./InsideDirectory&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/filename, camelCase export</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">import</span> CheckBox <span class="token keyword">from</span> <span class="token string">&#39;./check_box&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase import/export, snake_case filename</span>\n<span class="token keyword">import</span> forty_two <span class="token keyword">from</span> <span class="token string">&#39;./forty_two&#39;</span><span class="token punctuation">;</span> <span class="token comment">// snake_case import/filename, camelCase export</span>\n<span class="token keyword">import</span> inside_directory <span class="token keyword">from</span> <span class="token string">&#39;./inside_directory&#39;</span><span class="token punctuation">;</span> <span class="token comment">// snake_case import, camelCase export</span>\n<span class="token keyword">import</span> index <span class="token keyword">from</span> <span class="token string">&#39;./inside_directory/index&#39;</span><span class="token punctuation">;</span> <span class="token comment">// requiring the index file explicitly</span>\n<span class="token keyword">import</span> insideDirectory <span class="token keyword">from</span> <span class="token string">&#39;./insideDirectory/index&#39;</span><span class="token punctuation">;</span> <span class="token comment">// requiring the index file explicitly</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> CheckBox <span class="token keyword">from</span> <span class="token string">&#39;./CheckBox&#39;</span><span class="token punctuation">;</span> <span class="token comment">// PascalCase export/import/filename</span>\n<span class="token keyword">import</span> fortyTwo <span class="token keyword">from</span> <span class="token string">&#39;./fortyTwo&#39;</span><span class="token punctuation">;</span> <span class="token comment">// camelCase export/import/filename</span>\n<span class="token keyword">import</span> insideDirectory <span class="token keyword">from</span> <span class="token string">&#39;./insideDirectory&#39;</span><span class="token punctuation">;</span> <span class="token comment">// camelCase export/import/directory name/implicit &quot;index&quot;</span>\n<span class="token comment">// ^ supports both insideDirectory.js and insideDirectory/index.js</span>\n</code></pre></div></li></ul><p><a name="naming--camelCase-default-export"></a><a name="22.7"></a></p><ul><li><p><a href="#naming--camelCase-default-export">23.7</a> Use camelCase when you export-default a function. Your filename should be identical to your function’s name.</p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">makeStyleGuide</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">}</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> makeStyleGuide<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="naming--PascalCase-singleton"></a><a name="22.8"></a></p><ul><li><p><a href="#naming--PascalCase-singleton">23.8</a> Use PascalCase when you export a constructor / class / singleton / function library / bare object.</p><div class="language-javascript"><pre><code><span class="token keyword">const</span> AirbnbStyleGuide <span class="token operator">=</span> <span class="token punctuation">{</span>\n  es6<span class="token operator">:</span> <span class="token punctuation">{</span>\n  <span class="token punctuation">}</span><span class="token punctuation">,</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token keyword">export</span> <span class="token keyword">default</span> AirbnbStyleGuide<span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="naming--Acronyms-and-Initialisms"></a></p><ul><li><p><a href="#naming--Acronyms-and-Initialisms">23.9</a> Acronyms and initialisms should always be all uppercased, or all lowercased.</p><blockquote><p>Why? Names are for readability, not to appease a computer algorithm.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">import</span> SmsContainer <span class="token keyword">from</span> <span class="token string">&#39;./containers/SmsContainer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">const</span> HttpRequests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">import</span> SMSContainer <span class="token keyword">from</span> <span class="token string">&#39;./containers/SMSContainer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> HTTPRequests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// also good</span>\n<span class="token keyword">const</span> httpRequests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">import</span> TextMessageContainer <span class="token keyword">from</span> <span class="token string">&#39;./containers/TextMessageContainer&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// best</span>\n<span class="token keyword">const</span> requests <span class="token operator">=</span> <span class="token punctuation">[</span>\n  <span class="token comment">// ...</span>\n<span class="token punctuation">]</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="naming--uppercase"></a></p><ul><li><p><a href="#naming--uppercase">23.10</a> You may optionally uppercase a constant only if it (1) is exported, (2) is a <code>const</code> (it can not be reassigned), and (3) the programmer can trust it (and its nested properties) to never change.</p><blockquote><p>Why? This is an additional tool to assist in situations where the programmer would be unsure if a variable might ever change. UPPERCASE_VARIABLES are letting the programmer know that they can trust the variable (and its properties) not to change.</p></blockquote><ul><li>What about all <code>const</code> variables? - This is unnecessary, so uppercasing should not be used for constants within a file. It should be used for exported constants however.</li><li>What about exported objects? - Uppercase at the top level of export (e.g. <code>EXPORTED_OBJECT.key</code>) and maintain that all nested properties do not change.</li></ul><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> <span class="token constant">PRIVATE_VARIABLE</span> <span class="token operator">=</span> <span class="token string">&#39;should not be unnecessarily uppercased within a file&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">THING_TO_BE_CHANGED</span> <span class="token operator">=</span> <span class="token string">&#39;should obviously not be uppercased&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token keyword">export</span> <span class="token keyword">let</span> <span class="token constant">REASSIGNABLE_VARIABLE</span> <span class="token operator">=</span> <span class="token string">&#39;do not use let with uppercase variables&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ---</span>\n\n<span class="token comment">// allowed but does not supply semantic value</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> apiKey <span class="token operator">=</span> <span class="token string">&#39;SOMEKEY&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// better in most cases</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">API_KEY</span> <span class="token operator">=</span> <span class="token string">&#39;SOMEKEY&#39;</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ---</span>\n\n<span class="token comment">// bad - unnecessarily uppercases key while adding no semantic value</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MAPPING</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  <span class="token constant">KEY</span><span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">export</span> <span class="token keyword">const</span> <span class="token constant">MAPPING</span> <span class="token operator">=</span> <span class="token punctuation">{</span>\n  key<span class="token operator">:</span> <span class="token string">&#39;value&#39;</span>\n<span class="token punctuation">}</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="accessors" tabindex="-1">Accessors <a class="header-anchor" href="#accessors" aria-hidden="true">#</a></h2><p><a name="accessors--not-required"></a><a name="23.1"></a></p><ul><li><a href="#accessors--not-required">24.1</a> Accessor functions for properties are not required.</li></ul><p><a name="accessors--no-getters-setters"></a><a name="23.2"></a></p><ul><li><p><a href="#accessors--no-getters-setters">24.2</a> Do not use JavaScript getters/setters as they cause unexpected side effects and are harder to test, maintain, and reason about. Instead, if you do make accessor functions, use <code>getVal()</code> and <code>setVal(&#39;hello&#39;)</code>.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">class</span> <span class="token class-name">Dragon</span> <span class="token punctuation">{</span>\n  <span class="token keyword">get</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token keyword">set</span> <span class="token function">age</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">class</span> <span class="token class-name">Dragon</span> <span class="token punctuation">{</span>\n  <span class="token function">getAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">setAge</span><span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token comment">// ...</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="accessors--boolean-prefix"></a><a name="23.3"></a></p><ul><li><p><a href="#accessors--boolean-prefix">24.3</a> If the property/method is a <code>boolean</code>, use <code>isVal()</code> or <code>hasVal()</code>.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dragon<span class="token punctuation">.</span><span class="token function">age</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>dragon<span class="token punctuation">.</span><span class="token function">hasAge</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="accessors--consistent"></a><a name="23.4"></a></p><ul><li><p><a href="#accessors--consistent">24.4</a> It’s okay to create <code>get()</code> and <code>set()</code> functions, but be consistent.</p><div class="language-javascript"><pre><code><span class="token keyword">class</span> <span class="token class-name">Jedi</span> <span class="token punctuation">{</span>\n  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">options <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span></span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">const</span> lightsaber <span class="token operator">=</span> options<span class="token punctuation">.</span>lightsaber <span class="token operator">||</span> <span class="token string">&#39;blue&#39;</span><span class="token punctuation">;</span>\n    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">set</span><span class="token punctuation">(</span><span class="token string">&#39;lightsaber&#39;</span><span class="token punctuation">,</span> lightsaber<span class="token punctuation">)</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">set</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span> <span class="token operator">=</span> val<span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n\n  <span class="token function">get</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token punctuation">{</span>\n    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>key<span class="token punctuation">]</span><span class="token punctuation">;</span>\n  <span class="token punctuation">}</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="events" tabindex="-1">Events <a class="header-anchor" href="#events" aria-hidden="true">#</a></h2><p><a name="events--hash"></a><a name="24.1"></a></p><ul><li><p><a href="#events--hash">25.1</a> When attaching data payloads to events (whether DOM events or something more proprietary like Backbone events), pass an object literal (also known as a &quot;hash&quot;) instead of a raw value. This allows a subsequent contributor to add more data to the event payload without finding and updating every handler for the event. For example, instead of:</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> listing<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> listingID</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with listingID</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div><p>prefer:</p><div class="language-javascript"><pre><code><span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trigger</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> listingID<span class="token operator">:</span> listing<span class="token punctuation">.</span>id <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// ...</span>\n\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;listingUpdated&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">e<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>\n  <span class="token comment">// do something with data.listingID</span>\n<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="jquery" tabindex="-1">jQuery <a class="header-anchor" href="#jquery" aria-hidden="true">#</a></h2><p><a name="jquery--dollar-prefix"></a><a name="25.1"></a></p><ul><li><p><a href="#jquery--dollar-prefix">26.1</a> Prefix jQuery object variables with a <code>$</code>.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">const</span> sidebar <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> $sidebar <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">const</span> $sidebarBtn <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar-btn&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><a name="jquery--cache"></a><a name="25.2"></a></p><ul><li><p><a href="#jquery--cache">26.2</a> Cache jQuery lookups.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token keyword">function</span> <span class="token function">setSidebar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...</span>\n\n  <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;background-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n\n<span class="token comment">// good</span>\n<span class="token keyword">function</span> <span class="token function">setSidebar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">const</span> $sidebar <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n  $sidebar<span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n  <span class="token comment">// ...</span>\n\n  $sidebar<span class="token punctuation">.</span><span class="token function">css</span><span class="token punctuation">(</span><span class="token punctuation">{</span>\n    <span class="token string">&#39;background-color&#39;</span><span class="token operator">:</span> <span class="token string">&#39;pink&#39;</span><span class="token punctuation">,</span>\n  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="jquery--queries"></a><a name="25.3"></a></p><ul><li><a href="#jquery--queries">26.3</a> For DOM queries use Cascading <code>$(&#39;.sidebar ul&#39;)</code> or parent &gt; child <code>$(&#39;.sidebar &gt; ul&#39;)</code>. <a href="http://jsperf.com/jquery-find-vs-context-sel/16" target="_blank" rel="noopener noreferrer">jsPerf</a></li></ul><p><a name="jquery--find"></a><a name="25.4"></a></p><ul><li><p><a href="#jquery--find">26.4</a> Use <code>find</code> with scoped jQuery object queries.</p><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// bad</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n<span class="token function">$</span><span class="token punctuation">(</span><span class="token string">&#39;.sidebar &gt; ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n<span class="token comment">// good</span>\n$sidebar<span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">&#39;ul&#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">hide</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="ecmascript-5-compatibility" tabindex="-1">ECMAScript 5 Compatibility <a class="header-anchor" href="#ecmascript-5-compatibility" aria-hidden="true">#</a></h2><p><a name="es5-compat--kangax"></a><a name="26.1"></a></p><ul><li><a href="#es5-compat--kangax">27.1</a> Refer to <a href="https://twitter.com/kangax/" target="_blank" rel="noopener noreferrer">Kangax</a>’s ES5 <a href="https://kangax.github.io/es5-compat-table/" target="_blank" rel="noopener noreferrer">compatibility table</a>.</li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><p><a name="ecmascript-6-styles"></a></p><h2 id="ecmascript-6-es-2015-styles" tabindex="-1">ECMAScript 6+ (ES 2015+) Styles <a class="header-anchor" href="#ecmascript-6-es-2015-styles" aria-hidden="true">#</a></h2><p><a name="es6-styles"></a><a name="27.1"></a></p><ul><li><a href="#es6-styles">28.1</a> This is a collection of links to the various ES6+ features.</li></ul><ol><li><a href="#arrow-functions">Arrow Functions</a></li><li><a href="#classes--constructors">Classes</a></li><li><a href="#es6-object-shorthand">Object Shorthand</a></li><li><a href="#es6-object-concise">Object Concise</a></li><li><a href="#es6-computed-properties">Object Computed Properties</a></li><li><a href="#es6-template-literals">Template Strings</a></li><li><a href="#destructuring">Destructuring</a></li><li><a href="#es6-default-parameters">Default Parameters</a></li><li><a href="#es6-rest">Rest</a></li><li><a href="#es6-array-spreads">Array Spreads</a></li><li><a href="#references">Let and Const</a></li><li><a href="#es2016-properties--exponentiation-operator">Exponentiation Operator</a></li><li><a href="#iterators-and-generators">Iterators and Generators</a></li><li><a href="#modules">Modules</a></li></ol><p><a name="tc39-proposals"></a></p><ul><li><p><a href="#tc39-proposals">28.2</a> Do not use <a href="https://github.com/tc39/proposals" target="_blank" rel="noopener noreferrer">TC39 proposals</a> that have not reached stage 3.</p><blockquote><p>Why? <a href="https://tc39.github.io/process-document/" target="_blank" rel="noopener noreferrer">They are not finalized</a>, and they are subject to change or to be withdrawn entirely. We want to use JavaScript, and proposals are not JavaScript yet.</p></blockquote></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="standard-library" tabindex="-1">Standard Library <a class="header-anchor" href="#standard-library" aria-hidden="true">#</a></h2><p>The <a href="https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects" target="_blank" rel="noopener noreferrer">Standard Library</a> contains utilities that are functionally broken but remain for legacy reasons.</p><p><a name="standard-library--isnan"></a></p><ul><li><p><a href="#standard-library--isnan">29.1</a> Use <code>Number.isNaN</code> instead of global <code>isNaN</code>. eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals" target="_blank" rel="noopener noreferrer"><code>no-restricted-globals</code></a></p><blockquote><p>Why? The global <code>isNaN</code> coerces non-numbers to numbers, returning true for anything that coerces to NaN. If this behavior is desired, make it explicit.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;1.2&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\n<span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;1.2.3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// good</span>\nNumber<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token string">&#39;1.2.3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nNumber<span class="token punctuation">.</span><span class="token function">isNaN</span><span class="token punctuation">(</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">&#39;1.2.3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div></li></ul><p><a name="standard-library--isfinite"></a></p><ul><li><p><a href="#standard-library--isfinite">29.2</a> Use <code>Number.isFinite</code> instead of global <code>isFinite</code>. eslint: <a href="https://eslint.org/docs/rules/no-restricted-globals" target="_blank" rel="noopener noreferrer"><code>no-restricted-globals</code></a></p><blockquote><p>Why? The global <code>isFinite</code> coerces non-numbers to numbers, returning true for anything that coerces to a finite number. If this behavior is desired, make it explicit.</p></blockquote><div class="language-javascript"><pre><code><span class="token comment">// bad</span>\n<span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;2e3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n\n<span class="token comment">// good</span>\nNumber<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token string">&#39;2e3&#39;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span>\nNumber<span class="token punctuation">.</span><span class="token function">isFinite</span><span class="token punctuation">(</span><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">&#39;2e3&#39;</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span>\n</code></pre></div></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="testing" tabindex="-1">Testing <a class="header-anchor" href="#testing" aria-hidden="true">#</a></h2><p><a name="testing--yup"></a><a name="28.1"></a></p><ul><li><p><a href="#testing--yup">30.1</a> <strong>Yup.</strong></p><div class="language-javascript"><pre><code><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\n  <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>\n<span class="token punctuation">}</span>\n</code></pre></div></li></ul><p><a name="testing--for-real"></a><a name="28.2"></a></p><ul><li><a href="#testing--for-real">30.2</a> <strong>No, but seriously</strong>: <ul><li>Whichever testing framework you use, you should be writing tests!</li><li>Strive to write many small pure functions, and minimize where mutations occur.</li><li>Be cautious about stubs and mocks - they can make your tests more brittle.</li><li>We primarily use <a href="https://www.npmjs.com/package/mocha" target="_blank" rel="noopener noreferrer"><code>mocha</code></a> and <a href="https://www.npmjs.com/package/jest" target="_blank" rel="noopener noreferrer"><code>jest</code></a> at Airbnb. <a href="https://www.npmjs.com/package/tape" target="_blank" rel="noopener noreferrer"><code>tape</code></a> is also used occasionally for small, separate modules.</li><li>100% test coverage is a good goal to strive for, even if it’s not always practical to reach it.</li><li>Whenever you fix a bug, <em>write a regression test</em>. A bug fixed without a regression test is almost certainly going to break again in the future.</li></ul></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="performance" tabindex="-1">Performance <a class="header-anchor" href="#performance" aria-hidden="true">#</a></h2><ul><li><a href="https://www.kellegous.com/j/2013/01/26/layout-performance/" target="_blank" rel="noopener noreferrer">On Layout &amp; Web Performance</a></li><li><a href="https://jsperf.com/string-vs-array-concat/2" target="_blank" rel="noopener noreferrer">String vs Array Concat</a></li><li><a href="https://jsperf.com/try-catch-in-loop-cost/12" target="_blank" rel="noopener noreferrer">Try/Catch Cost In a Loop</a></li><li><a href="https://jsperf.com/bang-function" target="_blank" rel="noopener noreferrer">Bang Function</a></li><li><a href="https://jsperf.com/jquery-find-vs-context-sel/164" target="_blank" rel="noopener noreferrer">jQuery Find vs Context, Selector</a></li><li><a href="https://jsperf.com/innerhtml-vs-textcontent-for-script-text" target="_blank" rel="noopener noreferrer">innerHTML vs textContent for script text</a></li><li><a href="https://jsperf.com/ya-string-concat/38" target="_blank" rel="noopener noreferrer">Long String Concatenation</a></li><li><a href="https://www.quora.com/JavaScript-programming-language-Are-Javascript-functions-like-map-reduce-and-filter-already-optimized-for-traversing-array/answer/Quildreen-Motta" target="_blank" rel="noopener noreferrer">Are JavaScript functions like <code>map()</code>, <code>reduce()</code>, and <code>filter()</code> optimized for traversing arrays?</a></li><li>Loading...</li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="resources" tabindex="-1">Resources <a class="header-anchor" href="#resources" aria-hidden="true">#</a></h2><p><strong>Learning ES6+</strong></p><ul><li><a href="https://tc39.github.io/ecma262/" target="_blank" rel="noopener noreferrer">Latest ECMA spec</a></li><li><a href="http://exploringjs.com/" target="_blank" rel="noopener noreferrer">ExploringJS</a></li><li><a href="https://kangax.github.io/compat-table/es6/" target="_blank" rel="noopener noreferrer">ES6 Compatibility Table</a></li><li><a href="http://es6-features.org/" target="_blank" rel="noopener noreferrer">Comprehensive Overview of ES6 Features</a></li></ul><p><strong>Read This</strong></p><ul><li><a href="http://www.ecma-international.org/ecma-262/6.0/index.html" target="_blank" rel="noopener noreferrer">Standard ECMA-262</a></li></ul><p><strong>Tools</strong></p><ul><li>Code Style Linters <ul><li><a href="https://eslint.org/" target="_blank" rel="noopener noreferrer">ESlint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.eslintrc" target="_blank" rel="noopener noreferrer">Airbnb Style .eslintrc</a></li><li><a href="http://jshint.com/" target="_blank" rel="noopener noreferrer">JSHint</a> - <a href="https://github.com/airbnb/javascript/blob/master/linters/.jshintrc" target="_blank" rel="noopener noreferrer">Airbnb Style .jshintrc</a></li></ul></li><li>Neutrino Preset - <a href="https://neutrinojs.org/packages/airbnb/" target="_blank" rel="noopener noreferrer">@neutrinojs/airbnb</a></li></ul><p><strong>Other Style Guides</strong></p><ul><li><a href="https://google.github.io/styleguide/jsguide.html" target="_blank" rel="noopener noreferrer">Google JavaScript Style Guide</a></li><li><a href="https://google.github.io/styleguide/javascriptguide.xml" target="_blank" rel="noopener noreferrer">Google JavaScript Style Guide (Old)</a></li><li><a href="https://contribute.jquery.org/style-guide/js/" target="_blank" rel="noopener noreferrer">jQuery Core Style Guidelines</a></li><li><a href="https://github.com/rwaldron/idiomatic.js" target="_blank" rel="noopener noreferrer">Principles of Writing Consistent, Idiomatic JavaScript</a></li><li><a href="https://standardjs.com" target="_blank" rel="noopener noreferrer">StandardJS</a></li></ul><p><strong>Other Styles</strong></p><ul><li><a href="https://gist.github.com/cjohansen/4135065" target="_blank" rel="noopener noreferrer">Naming this in nested functions</a> - Christian Johansen</li><li><a href="https://github.com/airbnb/javascript/issues/52" target="_blank" rel="noopener noreferrer">Conditional Callbacks</a> - Ross Allen</li><li><a href="http://sideeffect.kr/popularconvention/#javascript" target="_blank" rel="noopener noreferrer">Popular JavaScript Coding Conventions on GitHub</a> - JeongHoon Byun</li><li><a href="http://benalman.com/news/2012/05/multiple-var-statements-javascript/" target="_blank" rel="noopener noreferrer">Multiple var statements in JavaScript, not superfluous</a> - Ben Alman</li></ul><p><strong>Further Reading</strong></p><ul><li><a href="https://javascriptweblog.wordpress.com/2010/10/25/understanding-javascript-closures/" target="_blank" rel="noopener noreferrer">Understanding JavaScript Closures</a> - Angus Croll</li><li><a href="http://www.2ality.com/2013/06/basic-javascript.html" target="_blank" rel="noopener noreferrer">Basic JavaScript for the impatient programmer</a> - Dr. Axel Rauschmayer</li><li><a href="http://youmightnotneedjquery.com/" target="_blank" rel="noopener noreferrer">You Might Not Need jQuery</a> - Zack Bloom &amp; Adam Schwartz</li><li><a href="https://github.com/lukehoban/es6features" target="_blank" rel="noopener noreferrer">ES6 Features</a> - Luke Hoban</li><li><a href="https://github.com/bendc/frontend-guidelines" target="_blank" rel="noopener noreferrer">Frontend Guidelines</a> - Benjamin De Cock</li></ul><p><strong>Books</strong></p><ul><li><a href="https://www.amazon.com/JavaScript-Good-Parts-Douglas-Crockford/dp/0596517742" target="_blank" rel="noopener noreferrer">JavaScript: The Good Parts</a> - Douglas Crockford</li><li><a href="https://www.amazon.com/JavaScript-Patterns-Stoyan-Stefanov/dp/0596806752" target="_blank" rel="noopener noreferrer">JavaScript Patterns</a> - Stoyan Stefanov</li><li><a href="https://www.amazon.com/JavaScript-Design-Patterns-Recipes-Problem-Solution/dp/159059908X" target="_blank" rel="noopener noreferrer">Pro JavaScript Design Patterns</a> - Ross Harmes and Dustin Diaz</li><li><a href="https://www.amazon.com/High-Performance-Web-Sites-Essential/dp/0596529309" target="_blank" rel="noopener noreferrer">High Performance Web Sites: Essential Knowledge for Front-End Engineers</a> - Steve Souders</li><li><a href="https://www.amazon.com/Maintainable-JavaScript-Nicholas-C-Zakas/dp/1449327680" target="_blank" rel="noopener noreferrer">Maintainable JavaScript</a> - Nicholas C. Zakas</li><li><a href="https://www.amazon.com/JavaScript-Web-Applications-Alex-MacCaw/dp/144930351X" target="_blank" rel="noopener noreferrer">JavaScript Web Applications</a> - Alex MacCaw</li><li><a href="https://www.amazon.com/Pro-JavaScript-Techniques-John-Resig/dp/1590597273" target="_blank" rel="noopener noreferrer">Pro JavaScript Techniques</a> - John Resig</li><li><a href="https://www.amazon.com/Smashing-Node-js-JavaScript-Everywhere-Magazine/dp/1119962595" target="_blank" rel="noopener noreferrer">Smashing Node.js: JavaScript Everywhere</a> - Guillermo Rauch</li><li><a href="https://www.amazon.com/Secrets-JavaScript-Ninja-John-Resig/dp/193398869X" target="_blank" rel="noopener noreferrer">Secrets of the JavaScript Ninja</a> - John Resig and Bear Bibeault</li><li><a href="http://humanjavascript.com/" target="_blank" rel="noopener noreferrer">Human JavaScript</a> - Henrik Joreteg</li><li><a href="http://superherojs.com/" target="_blank" rel="noopener noreferrer">Superhero.js</a> - Kim Joar Bekkelund, Mads Mobæk, &amp; Olav Bjorkoy</li><li><a href="http://jsbooks.revolunet.com/" target="_blank" rel="noopener noreferrer">JSBooks</a> - Julien Bouquillon</li><li><a href="https://www.manning.com/books/third-party-javascript" target="_blank" rel="noopener noreferrer">Third Party JavaScript</a> - Ben Vinegar and Anton Kovalyov</li><li><a href="http://amzn.com/0321812182" target="_blank" rel="noopener noreferrer">Effective JavaScript: 68 Specific Ways to Harness the Power of JavaScript</a> - David Herman</li><li><a href="http://eloquentjavascript.net/" target="_blank" rel="noopener noreferrer">Eloquent JavaScript</a> - Marijn Haverbeke</li><li><a href="http://shop.oreilly.com/product/0636920033769.do" target="_blank" rel="noopener noreferrer">You Don’t Know JS: ES6 &amp; Beyond</a> - Kyle Simpson</li></ul><p><strong>Blogs</strong></p><ul><li><a href="http://javascriptweekly.com/" target="_blank" rel="noopener noreferrer">JavaScript Weekly</a></li><li><a href="https://javascriptweblog.wordpress.com/" target="_blank" rel="noopener noreferrer">JavaScript, JavaScript...</a></li><li><a href="https://bocoup.com/weblog" target="_blank" rel="noopener noreferrer">Bocoup Weblog</a></li><li><a href="http://www.adequatelygood.com/" target="_blank" rel="noopener noreferrer">Adequately Good</a></li><li><a href="https://www.nczonline.net/" target="_blank" rel="noopener noreferrer">NCZOnline</a></li><li><a href="http://perfectionkills.com/" target="_blank" rel="noopener noreferrer">Perfection Kills</a></li><li><a href="http://benalman.com/" target="_blank" rel="noopener noreferrer">Ben Alman</a></li><li><a href="http://dmitry.baranovskiy.com/" target="_blank" rel="noopener noreferrer">Dmitry Baranovskiy</a></li><li><a href="http://code.tutsplus.com/?s=javascript" target="_blank" rel="noopener noreferrer">nettuts</a></li></ul><p><strong>Podcasts</strong></p><ul><li><a href="https://javascriptair.com/" target="_blank" rel="noopener noreferrer">JavaScript Air</a></li><li><a href="https://devchat.tv/js-jabber/" target="_blank" rel="noopener noreferrer">JavaScript Jabber</a></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="in-the-wild" tabindex="-1">In the Wild <a class="header-anchor" href="#in-the-wild" aria-hidden="true">#</a></h2><p>This is a list of organizations that are using this style guide. Send us a pull request and we&#39;ll add you to the list.</p><ul><li><strong>123erfasst</strong>: <a href="https://github.com/123erfasst/javascript" target="_blank" rel="noopener noreferrer">123erfasst/javascript</a></li><li><strong>4Catalyzer</strong>: <a href="https://github.com/4Catalyzer/javascript" target="_blank" rel="noopener noreferrer">4Catalyzer/javascript</a></li><li><strong>Aan Zee</strong>: <a href="https://github.com/AanZee/javascript" target="_blank" rel="noopener noreferrer">AanZee/javascript</a></li><li><strong>Airbnb</strong>: <a href="https://github.com/airbnb/javascript" target="_blank" rel="noopener noreferrer">airbnb/javascript</a></li><li><strong>AloPeyk</strong>: <a href="https://github.com/AloPeyk" target="_blank" rel="noopener noreferrer">AloPeyk</a></li><li><strong>AltSchool</strong>: <a href="https://github.com/AltSchool/javascript" target="_blank" rel="noopener noreferrer">AltSchool/javascript</a></li><li><strong>Apartmint</strong>: <a href="https://github.com/apartmint/javascript" target="_blank" rel="noopener noreferrer">apartmint/javascript</a></li><li><strong>Ascribe</strong>: <a href="https://github.com/ascribe/javascript" target="_blank" rel="noopener noreferrer">ascribe/javascript</a></li><li><strong>Avant</strong>: <a href="https://github.com/avantcredit/javascript" target="_blank" rel="noopener noreferrer">avantcredit/javascript</a></li><li><strong>Axept</strong>: <a href="https://github.com/axept/javascript" target="_blank" rel="noopener noreferrer">axept/javascript</a></li><li><strong>Billabong</strong>: <a href="https://github.com/billabong/javascript" target="_blank" rel="noopener noreferrer">billabong/javascript</a></li><li><strong>Bisk</strong>: <a href="https://github.com/Bisk/" target="_blank" rel="noopener noreferrer">bisk</a></li><li><strong>Bonhomme</strong>: <a href="https://github.com/bonhommeparis/javascript" target="_blank" rel="noopener noreferrer">bonhommeparis/javascript</a></li><li><strong>Brainshark</strong>: <a href="https://github.com/brainshark/javascript" target="_blank" rel="noopener noreferrer">brainshark/javascript</a></li><li><strong>CaseNine</strong>: <a href="https://github.com/CaseNine/javascript" target="_blank" rel="noopener noreferrer">CaseNine/javascript</a></li><li><strong>Cerner</strong>: <a href="https://github.com/cerner/" target="_blank" rel="noopener noreferrer">Cerner</a></li><li><strong>Chartboost</strong>: <a href="https://github.com/ChartBoost/javascript-style-guide" target="_blank" rel="noopener noreferrer">ChartBoost/javascript-style-guide</a></li><li><strong>Coeur d&#39;Alene Tribe</strong>: <a href="https://www.cdatribe-nsn.gov" target="_blank" rel="noopener noreferrer">www.cdatribe-nsn.gov</a></li><li><strong>ComparaOnline</strong>: <a href="https://github.com/comparaonline/javascript-style-guide" target="_blank" rel="noopener noreferrer">comparaonline/javascript</a></li><li><strong>Compass Learning</strong>: <a href="https://github.com/compasslearning/javascript-style-guide" target="_blank" rel="noopener noreferrer">compasslearning/javascript-style-guide</a></li><li><strong>DailyMotion</strong>: <a href="https://github.com/dailymotion/javascript" target="_blank" rel="noopener noreferrer">dailymotion/javascript</a></li><li><strong>DoSomething</strong>: <a href="https://github.com/DoSomething/eslint-config" target="_blank" rel="noopener noreferrer">DoSomething/eslint-config</a></li><li><strong>Digitpaint</strong> <a href="https://github.com/digitpaint/javascript" target="_blank" rel="noopener noreferrer">digitpaint/javascript</a></li><li><strong>Drupal</strong>: <a href="https://git.drupalcode.org/project/drupal/blob/8.6.x/core/.eslintrc.json" target="_blank" rel="noopener noreferrer">www.drupal.org</a></li><li><strong>Ecosia</strong>: <a href="https://github.com/ecosia/javascript" target="_blank" rel="noopener noreferrer">ecosia/javascript</a></li><li><strong>Evernote</strong>: <a href="https://github.com/evernote/javascript-style-guide" target="_blank" rel="noopener noreferrer">evernote/javascript-style-guide</a></li><li><strong>Evolution Gaming</strong>: <a href="https://github.com/evolution-gaming/javascript" target="_blank" rel="noopener noreferrer">evolution-gaming/javascript</a></li><li><strong>EvozonJs</strong>: <a href="https://github.com/evozonjs/javascript" target="_blank" rel="noopener noreferrer">evozonjs/javascript</a></li><li><strong>ExactTarget</strong>: <a href="https://github.com/ExactTarget/javascript" target="_blank" rel="noopener noreferrer">ExactTarget/javascript</a></li><li><strong>Flexberry</strong>: <a href="https://github.com/Flexberry/javascript-style-guide" target="_blank" rel="noopener noreferrer">Flexberry/javascript-style-guide</a></li><li><strong>Gawker Media</strong>: <a href="https://github.com/gawkermedia/" target="_blank" rel="noopener noreferrer">gawkermedia</a></li><li><strong>General Electric</strong>: <a href="https://github.com/GeneralElectric/javascript" target="_blank" rel="noopener noreferrer">GeneralElectric/javascript</a></li><li><strong>Generation Tux</strong>: <a href="https://github.com/generationtux/styleguide" target="_blank" rel="noopener noreferrer">GenerationTux/javascript</a></li><li><strong>GoodData</strong>: <a href="https://github.com/gooddata/gdc-js-style" target="_blank" rel="noopener noreferrer">gooddata/gdc-js-style</a></li><li><strong>GreenChef</strong>: <a href="https://github.com/greenchef/javascript" target="_blank" rel="noopener noreferrer">greenchef/javascript</a></li><li><strong>Grooveshark</strong>: <a href="https://github.com/grooveshark/javascript" target="_blank" rel="noopener noreferrer">grooveshark/javascript</a></li><li><strong>Grupo-Abraxas</strong>: <a href="https://github.com/Grupo-Abraxas/javascript" target="_blank" rel="noopener noreferrer">Grupo-Abraxas/javascript</a></li><li><strong>Happeo</strong>: <a href="https://github.com/happeo/javascript" target="_blank" rel="noopener noreferrer">happeo/javascript</a></li><li><strong>Honey</strong>: <a href="https://github.com/honeyscience/javascript" target="_blank" rel="noopener noreferrer">honeyscience/javascript</a></li><li><strong>How About We</strong>: <a href="https://github.com/howaboutwe/javascript-style-guide" target="_blank" rel="noopener noreferrer">howaboutwe/javascript</a></li><li><strong>HubSpot</strong>: <a href="https://github.com/HubSpot/javascript" target="_blank" rel="noopener noreferrer">HubSpot/javascript</a></li><li><strong>Hyper</strong>: <a href="https://github.com/hyperoslo/javascript-playbook/blob/master/style.md" target="_blank" rel="noopener noreferrer">hyperoslo/javascript-playbook</a></li><li><strong>InterCity Group</strong>: <a href="https://github.com/intercitygroup/javascript-style-guide" target="_blank" rel="noopener noreferrer">intercitygroup/javascript-style-guide</a></li><li><strong>Jam3</strong>: <a href="https://github.com/Jam3/Javascript-Code-Conventions" target="_blank" rel="noopener noreferrer">Jam3/Javascript-Code-Conventions</a></li><li><strong>JSSolutions</strong>: <a href="https://github.com/JSSolutions/javascript" target="_blank" rel="noopener noreferrer">JSSolutions/javascript</a></li><li><strong>Kaplan Komputing</strong>: <a href="https://github.com/kaplankomputing/javascript" target="_blank" rel="noopener noreferrer">kaplankomputing/javascript</a></li><li><strong>KickorStick</strong>: <a href="https://github.com/kickorstick/" target="_blank" rel="noopener noreferrer">kickorstick</a></li><li><strong>Kinetica Solutions</strong>: <a href="https://github.com/kinetica/Javascript-style-guide" target="_blank" rel="noopener noreferrer">kinetica/javascript</a></li><li><strong>LEINWAND</strong>: <a href="https://github.com/LEINWAND/javascript" target="_blank" rel="noopener noreferrer">LEINWAND/javascript</a></li><li><strong>Lonely Planet</strong>: <a href="https://github.com/lonelyplanet/javascript" target="_blank" rel="noopener noreferrer">lonelyplanet/javascript</a></li><li><strong>M2GEN</strong>: <a href="https://github.com/M2GEN/javascript" target="_blank" rel="noopener noreferrer">M2GEN/javascript</a></li><li><strong>Mighty Spring</strong>: <a href="https://github.com/mightyspring/javascript" target="_blank" rel="noopener noreferrer">mightyspring/javascript</a></li><li><strong>MinnPost</strong>: <a href="https://github.com/MinnPost/javascript" target="_blank" rel="noopener noreferrer">MinnPost/javascript</a></li><li><strong>MitocGroup</strong>: <a href="https://github.com/MitocGroup/javascript" target="_blank" rel="noopener noreferrer">MitocGroup/javascript</a></li><li><strong>Muber</strong>: <a href="https://github.com/muber/" target="_blank" rel="noopener noreferrer">muber</a></li><li><strong>National Geographic</strong>: <a href="https://github.com/natgeo/" target="_blank" rel="noopener noreferrer">natgeo</a></li><li><strong>NullDev</strong>: <a href="https://github.com/NullDevCo/JavaScript-Styleguide" target="_blank" rel="noopener noreferrer">NullDevCo/JavaScript-Styleguide</a></li><li><strong>Nulogy</strong>: <a href="https://github.com/nulogy/javascript" target="_blank" rel="noopener noreferrer">nulogy/javascript</a></li><li><strong>Orange Hill Development</strong>: <a href="https://github.com/orangehill/javascript" target="_blank" rel="noopener noreferrer">orangehill/javascript</a></li><li><strong>Orion Health</strong>: <a href="https://github.com/orionhealth/javascript" target="_blank" rel="noopener noreferrer">orionhealth/javascript</a></li><li><strong>OutBoxSoft</strong>: <a href="https://github.com/OutBoxSoft/javascript" target="_blank" rel="noopener noreferrer">OutBoxSoft/javascript</a></li><li><strong>Peerby</strong>: <a href="https://github.com/Peerby/javascript" target="_blank" rel="noopener noreferrer">Peerby/javascript</a></li><li><strong>Pier 1</strong>: <a href="https://github.com/pier1/javascript" target="_blank" rel="noopener noreferrer">Pier1/javascript</a></li><li><strong>Qotto</strong>: <a href="https://github.com/Qotto/javascript-style-guide" target="_blank" rel="noopener noreferrer">Qotto/javascript-style-guide</a></li><li><strong>React</strong>: <a href="https://facebook.github.io/react/contributing/how-to-contribute.html#style-guide" target="_blank" rel="noopener noreferrer">facebook.github.io/react/contributing/how-to-contribute.html#style-guide</a></li><li><strong>REI</strong>: <a href="https://github.com/rei/code-style-guides/" target="_blank" rel="noopener noreferrer">reidev/js-style-guide</a></li><li><strong>Ripple</strong>: <a href="https://github.com/ripple/javascript-style-guide" target="_blank" rel="noopener noreferrer">ripple/javascript-style-guide</a></li><li><strong>Sainsbury’s Supermarkets</strong>: <a href="https://github.com/jsainsburyplc" target="_blank" rel="noopener noreferrer">jsainsburyplc</a></li><li><strong>Shutterfly</strong>: <a href="https://github.com/shutterfly/javascript" target="_blank" rel="noopener noreferrer">shutterfly/javascript</a></li><li><strong>Sourcetoad</strong>: <a href="https://github.com/sourcetoad/javascript" target="_blank" rel="noopener noreferrer">sourcetoad/javascript</a></li><li><strong>Springload</strong>: <a href="https://github.com/springload/" target="_blank" rel="noopener noreferrer">springload</a></li><li><strong>StratoDem Analytics</strong>: <a href="https://github.com/stratodem/javascript" target="_blank" rel="noopener noreferrer">stratodem/javascript</a></li><li><strong>SteelKiwi Development</strong>: <a href="https://github.com/steelkiwi/javascript" target="_blank" rel="noopener noreferrer">steelkiwi/javascript</a></li><li><strong>StudentSphere</strong>: <a href="https://github.com/studentsphere/guide-javascript" target="_blank" rel="noopener noreferrer">studentsphere/javascript</a></li><li><strong>SwoopApp</strong>: <a href="https://github.com/swoopapp/javascript" target="_blank" rel="noopener noreferrer">swoopapp/javascript</a></li><li><strong>SysGarage</strong>: <a href="https://github.com/sysgarage/javascript-style-guide" target="_blank" rel="noopener noreferrer">sysgarage/javascript-style-guide</a></li><li><strong>Syzygy Warsaw</strong>: <a href="https://github.com/syzygypl/javascript" target="_blank" rel="noopener noreferrer">syzygypl/javascript</a></li><li><strong>Target</strong>: <a href="https://github.com/target/javascript" target="_blank" rel="noopener noreferrer">target/javascript</a></li><li><strong>Terra</strong>: <a href="https://github.com/cerner?utf8=%E2%9C%93&amp;q=terra&amp;type=&amp;language=" target="_blank" rel="noopener noreferrer">terra</a></li><li><strong>TheLadders</strong>: <a href="https://github.com/TheLadders/javascript" target="_blank" rel="noopener noreferrer">TheLadders/javascript</a></li><li><strong>The Nerdery</strong>: <a href="https://github.com/thenerdery/javascript-standards" target="_blank" rel="noopener noreferrer">thenerdery/javascript-standards</a></li><li><strong>Tomify</strong>: <a href="https://github.com/tomprats" target="_blank" rel="noopener noreferrer">tomprats</a></li><li><strong>Traitify</strong>: <a href="https://github.com/traitify/eslint-config-traitify" target="_blank" rel="noopener noreferrer">traitify/eslint-config-traitify</a></li><li><strong>T4R Technology</strong>: <a href="https://github.com/T4R-Technology/javascript" target="_blank" rel="noopener noreferrer">T4R-Technology/javascript</a></li><li><strong>UrbanSim</strong>: <a href="https://github.com/urbansim/" target="_blank" rel="noopener noreferrer">urbansim</a></li><li><strong>VoxFeed</strong>: <a href="https://github.com/VoxFeed/javascript-style-guide" target="_blank" rel="noopener noreferrer">VoxFeed/javascript-style-guide</a></li><li><strong>WeBox Studio</strong>: <a href="https://github.com/weboxstudio/javascript" target="_blank" rel="noopener noreferrer">weboxstudio/javascript</a></li><li><strong>Weggo</strong>: <a href="https://github.com/Weggo/javascript" target="_blank" rel="noopener noreferrer">Weggo/javascript</a></li><li><strong>Zillow</strong>: <a href="https://github.com/zillow/javascript" target="_blank" rel="noopener noreferrer">zillow/javascript</a></li><li><strong>ZocDoc</strong>: <a href="https://github.com/ZocDoc/javascript" target="_blank" rel="noopener noreferrer">ZocDoc/javascript</a></li></ul><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="translation" tabindex="-1">Translation <a class="header-anchor" href="#translation" aria-hidden="true">#</a></h2><p>This style guide is also available in other languages:</p><ul><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Brazil.png" alt="br"> <strong>Brazilian Portuguese</strong>: <a href="https://github.com/armoucar/javascript-style-guide" target="_blank" rel="noopener noreferrer">armoucar/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Bulgaria.png" alt="bg"> <strong>Bulgarian</strong>: <a href="https://github.com/borislavvv/javascript" target="_blank" rel="noopener noreferrer">borislavvv/javascript</a></li><li><img src="https://raw.githubusercontent.com/fpmweb/javascript-style-guide/master/img/catala.png" alt="ca"> <strong>Catalan</strong>: <a href="https://github.com/fpmweb/javascript-style-guide" target="_blank" rel="noopener noreferrer">fpmweb/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/China.png" alt="cn"> <strong>Chinese (Simplified)</strong>: <a href="https://github.com/lin-123/javascript" target="_blank" rel="noopener noreferrer">lin-123/javascript</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Taiwan.png" alt="tw"> <strong>Chinese (Traditional)</strong>: <a href="https://github.com/jigsawye/javascript" target="_blank" rel="noopener noreferrer">jigsawye/javascript</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/France.png" alt="fr"> <strong>French</strong>: <a href="https://github.com/nmussy/javascript-style-guide" target="_blank" rel="noopener noreferrer">nmussy/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Germany.png" alt="de"> <strong>German</strong>: <a href="https://github.com/timofurrer/javascript-style-guide" target="_blank" rel="noopener noreferrer">timofurrer/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Italy.png" alt="it"> <strong>Italian</strong>: <a href="https://github.com/sinkswim/javascript-style-guide" target="_blank" rel="noopener noreferrer">sinkswim/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Japan.png" alt="jp"> <strong>Japanese</strong>: <a href="https://github.com/mitsuruog/javascript-style-guide" target="_blank" rel="noopener noreferrer">mitsuruog/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/South-Korea.png" alt="kr"> <strong>Korean</strong>: <a href="https://github.com/ParkSB/javascript-style-guide" target="_blank" rel="noopener noreferrer">ParkSB/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Russia.png" alt="ru"> <strong>Russian</strong>: <a href="https://github.com/leonidlebedev/javascript-airbnb" target="_blank" rel="noopener noreferrer">leonidlebedev/javascript-airbnb</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Spain.png" alt="es"> <strong>Spanish</strong>: <a href="https://github.com/paolocarrasco/javascript-style-guide" target="_blank" rel="noopener noreferrer">paolocarrasco/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Thailand.png" alt="th"> <strong>Thai</strong>: <a href="https://github.com/lvarayut/javascript-style-guide" target="_blank" rel="noopener noreferrer">lvarayut/javascript-style-guide</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Turkey.png" alt="tr"> <strong>Turkish</strong>: <a href="https://github.com/eraycetinay/javascript" target="_blank" rel="noopener noreferrer">eraycetinay/javascript</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Ukraine.png" alt="ua"> <strong>Ukrainian</strong>: <a href="https://github.com/ivanzusko/javascript" target="_blank" rel="noopener noreferrer">ivanzusko/javascript</a></li><li><img src="https://raw.githubusercontent.com/gosquared/flags/master/flags/flags/shiny/24/Vietnam.png" alt="vn"> <strong>Vietnam</strong>: <a href="https://github.com/dangkyokhoang/javascript-style-guide" target="_blank" rel="noopener noreferrer">dangkyokhoang/javascript-style-guide</a></li></ul><h2 id="the-javascript-style-guide-guide" tabindex="-1">The JavaScript Style Guide Guide <a class="header-anchor" href="#the-javascript-style-guide-guide" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/airbnb/javascript/wiki/The-JavaScript-Style-Guide-Guide" target="_blank" rel="noopener noreferrer">Reference</a></li></ul><h2 id="chat-with-us-about-javascript" tabindex="-1">Chat With Us About JavaScript <a class="header-anchor" href="#chat-with-us-about-javascript" aria-hidden="true">#</a></h2><ul><li>Find us on <a href="https://gitter.im/airbnb/javascript" target="_blank" rel="noopener noreferrer">gitter</a>.</li></ul><h2 id="contributors" tabindex="-1">Contributors <a class="header-anchor" href="#contributors" aria-hidden="true">#</a></h2><ul><li><a href="https://github.com/airbnb/javascript/graphs/contributors" target="_blank" rel="noopener noreferrer">View Contributors</a></li></ul><h2 id="license" tabindex="-1">License <a class="header-anchor" href="#license" aria-hidden="true">#</a></h2><p>(The MIT License)</p><p>Copyright (c) 2012 Airbnb</p><p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the &#39;Software&#39;), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p><p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p><p>THE SOFTWARE IS PROVIDED &#39;AS IS&#39;, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p><p><strong><a href="#table-of-contents">⬆ back to top</a></strong></p><h2 id="amendments" tabindex="-1">Amendments <a class="header-anchor" href="#amendments" aria-hidden="true">#</a></h2><p>We encourage you to fork this guide and change the rules to fit your team’s style guide. Below, you may list some amendments to the style guide. This allows you to periodically update your style guide without having to deal with merge conflicts.</p><h1 id="" tabindex="-1">}; <a class="header-anchor" href="#" aria-hidden="true">#</a></h1>',436);var l=n(e,[["render",function(n,t,o,e,l,r){return p(),s("div",null,[a("\n * @Description: airbnb\n * @Author: Pony\n * @Date: 2021-09-21 00:43:14\n * @LastEditors: Pony\n * @LastEditTime: 2021-09-21 01:31:26\n * @FilePath: /demo01/docs/home/font-endSpecification/airbnb/index.md\n"),c])}]]);export{o as __pageData,l as default};
